<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>启智自动化构建Demo</title>
    
    <!-- Favicon links -->
    <link rel="icon" type="image/png" sizes="16x16" href="/static/icons8-docker-doodle-16.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/static/icons8-docker-doodle-32.png">
    <link rel="apple-touch-icon" href="/static/icons8-docker-doodle-120.png">
    <link rel="shortcut icon" href="/static/icons8-docker-doodle-32.png">
    
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.min.js"></script>
    <style>
        .loader {
            border: 4px solid #E6F2FF;
            border-top: 4px solid #4A90E2;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .monaco-container {
            height: 400px;
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
            position: relative;
            overflow: hidden;
            background: #ffffff;
        }
        .monaco-container > div {
            width: 100%;
            height: 100%;
        }
        .monaco-container-compose {
            height: 250px;
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
            position: relative;
            overflow: hidden;
            background: #ffffff;
        }
        .monaco-container-compose > div {
            width: 100%;
            height: 100%;
        }
        .step-active {
            border-color: #4A90E2;
            background-color: #EFF6FF;
        }
        .step-completed {
            border-color: #10B981;
            background-color: #F0FDF4;
        }
        .card {
            background: #FFFFFF;
            border: 1px solid #E5E7EB;
            border-radius: 0.5rem;
            box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        }
        .btn-primary {
            background-color: #4A90E2;
            color: white;
            border: 1px solid #4A90E2;
            border-radius: 0.375rem;
            font-weight: 500;
            transition: all 0.2s;
        }
        .btn-primary:hover {
            background-color: #3A7BC8;
            border-color: #3A7BC8;
        }
        .form-input {
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
            padding: 0.75rem 1rem;
        }
        .form-input:focus {
            outline: none;
            border-color: #4A90E2;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }
        .main-container {
            width: 80%;
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen flex flex-col">
    <!-- Header -->
    <header class="border-b border-gray-200 bg-white">
        <div class="main-container mx-auto px-4 py-4 flex justify-between items-center">
            <h1 class="text-2xl font-bold">
                <a href="/" class="hover:opacity-80 transition-opacity">
                    <span class="text-gray-900">启智</span><span class="text-[#4A90E2]">自动化构建</span>
                </a>
            </h1>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-container mx-auto px-4 py-8 flex-grow">
        <!-- Hero Section -->
        <div class="mb-10 text-center">
            <p class="text-gray-600 text-lg max-w-2xl mx-auto">
                粘贴任何 GitHub 仓库 URL，获取由AI为您项目的特定技术栈量身定制
            </p>
        </div>

        <!-- Error Message -->
        {% if error %}
        <div class="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700">
            {{ error }}
        </div>
        {% endif %}

        <!-- Pre-filled URL notification -->
        {% if pre_filled %}
        <div class="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg text-green-700">
            <div class="flex items-center gap-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span class="font-medium">太好了！我们已从 URL 自动检测到您的 GitHub 仓库。</span>
            </div>
            <p class="text-sm mt-1">您现在可以为此仓库生成 Dockerfile，或根据需要修改 URL。</p>
        </div>
        {% endif %}

        <!-- Input Form -->
        <div class="mb-8">
            <div class="card p-6">
                <form method="post" class="flex flex-col md:flex-row gap-4" onsubmit="prepareFormSubmit(event)">
                    <div class="flex-1">
                        <input 
                            type="url" 
                            name="repo_url" 
                            id="repo_url"
                            value="{{ repo_url }}"
                            placeholder="https://github.com/用户名/仓库名"
                            required
                            class="form-input w-full text-base"
                        >
                    </div>
                    <div class="md:w-auto">
                        <button 
                            type="submit"
                            class="btn-primary py-3 px-6 text-base w-full"
                        >
                            自动化构建
                        </button>
                    </div>
                    <input type="hidden" name="additional_instructions_hidden" id="additional_instructions_hidden" value="">
                </form>
                
                <!-- Examples and Additional instructions row -->
                <div class="mt-6 flex flex-col md:flex-row md:justify-between md:items-start gap-4">
                    <!-- Additional instructions checkbox -->
                    <div class="flex-shrink-0 self-start md:self-center">
                        <div class="flex items-center">
                            <input type="checkbox" 
                                   id="show_instructions" 
                                   onchange="toggleInstructions()"
                                   class="w-4 h-4 text-[#4A90E2] bg-gray-100 border-gray-300 rounded focus:ring-[#4A90E2] focus:ring-2">
                            <label for="show_instructions" class="ml-2 text-gray-700">附加说明</label>
                        </div>
                    </div>
                </div>
                
                <!-- Additional instructions textarea (spans full width) -->
                <div id="instructions_container" class="hidden mt-4">
                    <textarea 
                        id="additional_instructions"
                        name="additional_instructions"
                        placeholder="例如，使用 Alpine Linux，包含特定工具，针对生产环境优化等"
                        rows="3"
                        class="form-input w-full text-sm"
                    ></textarea>
                </div>
            </div>
        </div>

        <!-- Loading State -->
        {% if loading %}
        <div class="card p-8">
            <div class="flex flex-col items-center space-y-4">
                <div class="loader"></div>
                <p class="text-lg font-medium text-gray-900">正在分析仓库并生成 Dockerfile...</p>
                <p class="text-sm text-gray-600">这可能需要一些时间</p>
            </div>
        </div>
        {% endif %}

        <!-- Streaming State -->
        {% if streaming %}
        <div id="streaming-container">
            <div class="card p-6">
                
                <!-- Status Display -->
                <div class="text-center mb-6">
                    <div class="loader mx-auto mb-4"></div>
                    <h2 class="text-xl font-bold text-gray-900 mb-2">正在自动化构建</h2>
                    <p id="status-message" class="text-gray-600">连接中...</p>
                </div>

                <!-- Streaming Response Box -->
                <div id="streaming-response-container" class="relative mb-6 hidden">
                    <div class="bg-gray-50 border border-gray-200 rounded p-4">
                        <h3 class="text-lg font-medium text-gray-900 mb-3">AI 实时响应：</h3>
                        <div 
                            id="streaming-content" 
                            class="max-h-[500px] overflow-y-auto bg-white border border-gray-200 rounded p-4 font-mono text-sm whitespace-pre-wrap"
                        ></div>
                    </div>
                </div>

                <!-- Progress Steps -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div id="step-clone" class="border border-gray-200 rounded p-4 transition-all duration-300">
                        <div class="flex items-center">
                            <div class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center mr-3">
                                <span class="text-sm font-bold">1</span>
                            </div>
                            <span class="font-medium">克隆仓库</span>
                        </div>
                    </div>
                    <div id="step-analyze" class="border border-gray-200 rounded p-4 transition-all duration-300">
                        <div class="flex items-center">
                            <div class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center mr-3">
                                <span class="text-sm font-bold">2</span>
                            </div>
                            <span class="font-medium">分析结构</span>
                        </div>
                    </div>
                    <div id="step-generate" class="border border-gray-200 rounded p-4 transition-all duration-300">
                        <div class="flex items-center">
                            <div class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center mr-3">
                                <span class="text-sm font-bold">3</span>
                            </div>
                            <span class="font-medium">生成 Dockerfile</span>
                        </div>
                    </div>
                </div>

            </div>
        </div>

        <!-- Results Container (hidden initially) -->
        <div id="results-container" class="hidden">
            <div class="card p-6 space-y-6">
                <!-- Results content will be populated by JavaScript -->
            </div>
        </div>
        {% endif %}

        <!-- Results (for non-streaming requests) -->
        {% if result %}
        <div class="card p-6 space-y-6">
            
            <!-- Project Info -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div class="border border-gray-200 rounded p-4">
                    <h3 class="font-medium text-gray-900 mb-1">项目</h3>
                    <p class="text-sm text-gray-600">{{ result.project_name }}</p>
                </div>
                <div class="border border-gray-200 rounded p-4">
                    <h3 class="font-medium text-gray-900 mb-1">技术栈</h3>
                    <p class="text-sm text-gray-600">{{ result.technology_stack }}</p>
                </div>
                <div class="border border-gray-200 rounded p-4">
                    <h3 class="font-medium text-gray-900 mb-1">仓库大小</h3>
                    <p class="text-sm text-gray-600">{{ result.repo_info.file_count }} 个文件 ({{ result.repo_info.size_mb }} MB)</p>
                </div>
            </div>

            <!-- Dockerfile -->
            <div>
                <div class="flex justify-between items-center mb-3">
                    <h3 class="text-lg font-medium text-gray-900">Dockerfile</h3>
                    <button 
                        onclick="copyDockerfile()"
                        class="btn-primary px-4 py-2 flex items-center gap-2 text-sm"
                    >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                        </svg>
                        复制 Dockerfile
                    </button>
                </div>
                <div class="border border-gray-200 rounded">
                    <div class="monaco-container">
                        <div id="dockerfile-editor"></div>
                    </div>
                </div>
            </div>

            <!-- Docker Compose (if available) -->
            {% if result.docker_compose %}
            <div>
                <div class="flex justify-between items-center mb-3">
                    <h3 class="text-lg font-medium text-gray-900">docker-compose.yml</h3>
                    <button 
                        onclick="copyCompose()"
                        class="btn-primary px-4 py-2 flex items-center gap-2 text-sm"
                    >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                        </svg>
                        复制 Compose
                    </button>
                </div>
                <div class="border border-gray-200 rounded">
                    <div class="monaco-container-compose">
                        <div id="compose-editor"></div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Reasoning & Notes -->
            {% if result.reasoning or result.additional_notes %}
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                {% if result.reasoning %}
                <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-3">基础镜像选择理由</h3>
                    <div class="border border-gray-200 rounded p-4">
                        <p class="text-sm text-gray-600">{{ result.reasoning }}</p>
                    </div>
                </div>
                {% endif %}
                
                {% if result.additional_notes %}
                <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-3">附加说明</h3>
                    <div class="border border-gray-200 rounded p-4">
                        <p class="text-sm text-gray-600 whitespace-pre-wrap">{{ result.additional_notes }}</p>
                    </div>
                </div>
                {% endif %}
            </div>
            {% endif %}

        </div>
        {% endif %}
    </main>

    <!-- Footer -->
    <footer class="border-t border-gray-200 mt-auto bg-white">
    </footer>

    <script>
        // Example submission function
        function submitExample(repoUrl) {
            const input = document.getElementById('repo_url');
            input.value = repoUrl;
            input.focus();
            // Optionally auto-submit the form
            // input.form.submit();
        }

        // Toggle additional instructions visibility
        function toggleInstructions() {
            const checkbox = document.getElementById('show_instructions');
            const container = document.getElementById('instructions_container');
            
            if (checkbox.checked) {
                container.classList.remove('hidden');
                container.classList.add('block');
            } else {
                container.classList.add('hidden');
                container.classList.remove('block');
                // Clear the textarea when hiding
                document.getElementById('additional_instructions').value = '';
            }
        }

        // Prepare form submission by copying additional instructions to hidden input
        function prepareFormSubmit(event) {
            const checkbox = document.getElementById('show_instructions');
            const instructionsTextarea = document.getElementById('additional_instructions');
            const hiddenInput = document.getElementById('additional_instructions_hidden');
            
            if (checkbox.checked && instructionsTextarea.value.trim()) {
                hiddenInput.value = instructionsTextarea.value.trim();
            } else {
                hiddenInput.value = '';
            }
            
            // Allow form to submit normally
            return true;
        }

        // Monaco Editor setup
        let dockerfileEditor = null;
        let composeEditor = null;

        // Configure Monaco Editor loader
        require.config({ 
            paths: { 
                'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' 
            } 
        });

        // Initialize Monaco Editors when available
        function initializeEditors() {
            console.log('正在尝试初始化 Monaco 编辑器...');
            require(['vs/editor/editor.main'], function() {
                console.log('Monaco 编辑器加载成功');
                // Only initialize if we have results to show
                {% if result %}
                console.log('找到结果数据，正在初始化编辑器...');
                // Add a small delay to ensure DOM is ready
                setTimeout(() => {
                    initDockerfileEditor('{{ result.dockerfile|e }}');
                    {% if result.docker_compose %}
                    initComposeEditor('{{ result.docker_compose|e }}');
                    {% endif %}
                }, 200);
                {% else %}
                console.log('无结果数据可用');
                {% endif %}
            }, function(error) {
                console.error('加载 Monaco 编辑器失败:', error);
            });
        }

        function initDockerfileEditor(content) {
            const element = document.getElementById('dockerfile-editor');
            if (element) {
                console.log('正在初始化 Dockerfile 编辑器，内容:', content);
                
                dockerfileEditor = monaco.editor.create(element, {
                    value: content || '# 无 Dockerfile 内容',
                    language: 'dockerfile',
                    theme: 'vs',
                    readOnly: true,
                    minimap: { enabled: false },
                    fontSize: 14,
                    lineNumbers: 'on',
                    wordWrap: 'on',
                    folding: true,
                    automaticLayout: true,
                    scrollBeyondLastLine: false,
                    renderLineHighlight: 'none',
                    selectionHighlight: false,
                    occurrencesHighlight: false
                });
            } else {
                console.error('未找到 dockerfile-editor 元素');
            }
        }

        function initComposeEditor(content) {
            const element = document.getElementById('compose-editor');
            if (element) {
                console.log('正在初始化 Compose 编辑器，内容:', content);
                
                composeEditor = monaco.editor.create(element, {
                    value: content || '# 无 docker-compose 内容',
                    language: 'yaml',
                    theme: 'vs',
                    readOnly: true,
                    minimap: { enabled: false },
                    fontSize: 14,
                    lineNumbers: 'on',
                    wordWrap: 'on',
                    folding: true,
                    automaticLayout: true,
                    scrollBeyondLastLine: false,
                    renderLineHighlight: 'none',
                    selectionHighlight: false,
                    occurrencesHighlight: false
                });
            } else {
                console.error('未找到 compose-editor 元素');
            }
        }

        function createMonacoEditor(elementId, content, language) {
            console.log('正在为:', elementId, '创建 Monaco 编辑器，语言:', language);
            const element = document.getElementById(elementId);
            if (!element) {
                console.error('未找到元素:', elementId);
                return null;
            }
            
            const editor = monaco.editor.create(element, {
                value: content || '# 无内容',
                language: language,
                theme: 'vs',
                readOnly: true,
                minimap: { enabled: false },
                fontSize: 14,
                lineNumbers: 'on',
                wordWrap: 'on',
                folding: true,
                automaticLayout: true,
                scrollBeyondLastLine: false,
                renderLineHighlight: 'none',
                selectionHighlight: false,
                occurrencesHighlight: false
            });
            
            return editor;
        }

        // Copy functions for Monaco editors
        function copyDockerfile() {
            const content = dockerfileEditor ? dockerfileEditor.getValue() : '';
            const button = event.target.closest('button');
            copyToClipboard(content, 'Dockerfile 已复制！', button);
        }

        function copyCompose() {
            const content = composeEditor ? composeEditor.getValue() : '';
            const button = event.target.closest('button');
            copyToClipboard(content, 'Compose 文件已复制！', button);
        }

        // WebSocket streaming functionality
        {% if streaming %}
        const sessionId = "{{ session_id }}";
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = protocol + '//' + window.location.host + '/ws/' + sessionId;
        
        let ws;
        let streamingContent = '';
        let currentStep = 'clone';
        
        function connectWebSocket() {
            ws = new WebSocket(wsUrl);
            
            ws.onopen = function(event) {
                console.log('WebSocket 已连接');
                updateStatus('🔗 已连接！开始生成...');
            };
            
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                console.log('收到:', data);
                
                switch(data.type) {
                    case 'status':
                        updateStatus(data.content);
                        updateStepProgress(data.content);
                        break;
                    case 'stream_start':
                        updateStatus('🤖 AI 正在生成响应...');
                        highlightStep('generate');
                        // Show the streaming response container
                        document.getElementById('streaming-response-container').classList.remove('hidden');
                        break;
                    case 'chunk':
                        streamingContent += data.content;
                        updateStreamingContent(streamingContent);
                        // Ensure streaming response container is visible
                        document.getElementById('streaming-response-container').classList.remove('hidden');
                        break;
                    case 'complete':
                        updateStatus('✅ 生成完成！');
                        showResults(data.result);
                        break;
                    case 'error':
                        updateStatus('❌ 错误: ' + data.content);
                        showError(data.content);
                        break;
                }
            };
            
            ws.onclose = function(event) {
                console.log('WebSocket 已关闭');
                if (event.code !== 1000) { // 1000 is normal closure
                    updateStatus('❌ 连接丢失。请刷新并重试。');
                }
            };
            
            ws.onerror = function(error) {
                console.error('WebSocket 错误:', error);
                updateStatus('❌ 连接错误。请刷新并重试。');
            };
        }
        
        function updateStatus(message) {
            document.getElementById('status-message').textContent = message;
        }
        
        function updateStepProgress(message) {
            if (message.includes('克隆') || message.includes('🔄')) {
                highlightStep('clone');
            } else if (message.includes('分析') || message.includes('📊')) {
                completeStep('clone');
                highlightStep('analyze');
            } else if (message.includes('生成') || message.includes('🐳')) {
                completeStep('analyze');
                highlightStep('generate');
            }
        }
        
        function highlightStep(step) {
            const stepElement = document.getElementById('step-' + step);
            stepElement.classList.add('step-active');
        }
        
        function completeStep(step) {
            const stepElement = document.getElementById('step-' + step);
            stepElement.classList.remove('step-active');
            stepElement.classList.add('step-completed');
        }
        
        function updateStreamingContent(content) {
            const contentDiv = document.getElementById('streaming-content');
            contentDiv.textContent = content;
            contentDiv.scrollTop = contentDiv.scrollHeight;
        }
        
        function showResults(result) {
            completeStep('generate');
            
            // Hide streaming container
            document.getElementById('streaming-container').style.display = 'none';
            
            // Show results container
            const resultsContainer = document.getElementById('results-container');
            resultsContainer.classList.remove('hidden');
            
            // Populate results with Monaco editors
            resultsContainer.innerHTML = generateResultsHTML(result);
            
            // Initialize Monaco editors for streaming results
            setTimeout(() => {
                require(['vs/editor/editor.main'], function() {
                    dockerfileEditor = createMonacoEditor('dockerfile-editor-stream', result.dockerfile, 'dockerfile');
                    
                    if (result.docker_compose) {
                        composeEditor = createMonacoEditor('compose-editor-stream', result.docker_compose, 'yaml');
                    }
                });
            }, 100);
        }
        
        function showError(error) {
            const contentDiv = document.getElementById('streaming-content');
            contentDiv.innerHTML = '<div class="text-red-600 font-bold">错误: ' + error + '</div>';
        }
        
        function generateResultsHTML(result) {
            let html = '<div class="space-y-6">';
            
            // Project Info
            html += '<div class="grid grid-cols-1 md:grid-cols-3 gap-4">';
            html += '<div class="border border-gray-200 rounded p-4">';
            html += '<h3 class="font-medium text-gray-900 mb-1">项目</h3>';
            html += '<p class="text-sm text-gray-600">' + result.project_name + '</p>';
            html += '</div>';
            html += '<div class="border border-gray-200 rounded p-4">';
            html += '<h3 class="font-medium text-gray-900 mb-1">技术栈</h3>';
            html += '<p class="text-sm text-gray-600">' + result.technology_stack + '</p>';
            html += '</div>';
            html += '<div class="border border-gray-200 rounded p-4">';
            html += '<h3 class="font-medium text-gray-900 mb-1">仓库大小</h3>';
            html += '<p class="text-sm text-gray-600">' + result.repo_info.file_count + ' 个文件 (' + result.repo_info.size_mb + ' MB)</p>';
            html += '</div>';
            html += '</div>';

            // Dockerfile
            html += '<div>';
            html += '<div class="flex justify-between items-center mb-3">';
            html += '<h3 class="text-lg font-medium text-gray-900">生成的 Dockerfile</h3>';
            html += '<button onclick="copyDockerfile()" class="btn-primary px-4 py-2 flex items-center gap-2 text-sm">';
            html += '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" /></svg>';
            html += '复制 Dockerfile';
            html += '</button>';
            html += '</div>';
            html += '<div class="border border-gray-200 rounded">';
            html += '<div class="monaco-container">';
            html += '<div id="dockerfile-editor-stream"></div>';
            html += '</div>';
            html += '</div>';
            html += '</div>';

            // Docker Compose (if available)
            if (result.docker_compose) {
                html += '<div>';
                html += '<div class="flex justify-between items-center mb-3">';
                html += '<h3 class="text-lg font-medium text-gray-900">建议的 docker-compose.yml</h3>';
                html += '<button onclick="copyCompose()" class="btn-primary px-4 py-2 flex items-center gap-2 text-sm">';
                html += '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" /></svg>';
                html += '复制 Compose';
                html += '</button>';
                html += '</div>';
                html += '<div class="border border-gray-200 rounded">';
                html += '<div class="monaco-container-compose">';
                html += '<div id="compose-editor-stream"></div>';
                html += '</div>';
                html += '</div>';
                html += '</div>';
            }

            // Reasoning & Notes
            if (result.reasoning || result.additional_notes) {
                html += '<div class="grid grid-cols-1 md:grid-cols-2 gap-6">';
                
                if (result.reasoning) {
                    html += '<div>';
                    html += '<h3 class="text-lg font-medium text-gray-900 mb-3">基础镜像选择理由</h3>';
                    html += '<div class="border border-gray-200 rounded p-4">';
                    html += '<p class="text-sm text-gray-600">' + result.reasoning + '</p>';
                    html += '</div>';
                    html += '</div>';
                }
                
                if (result.additional_notes) {
                    html += '<div>';
                    html += '<h3 class="text-lg font-medium text-gray-900 mb-3">附加说明</h3>';
                    html += '<div class="border border-gray-200 rounded p-4">';
                    html += '<p class="text-sm text-gray-600 whitespace-pre-wrap">' + result.additional_notes + '</p>';
                    html += '</div>';
                    html += '</div>';
                }
                
                html += '</div>';
            }

            html += '</div>';
            return html;
        }
        
        // Connect when page loads
        connectWebSocket();
        {% endif %}

        // Copy to clipboard functionality
        async function copyToClipboard(text, successMessage, targetButton) {
            try {
                await navigator.clipboard.writeText(text);
                // Show success feedback only on the specific button
                if (targetButton) {
                    const originalText = targetButton.innerHTML;
                    targetButton.innerHTML = '✓ ' + (successMessage || '已复制!');
                    setTimeout(() => {
                        targetButton.innerHTML = originalText;
                    }, 2000);
                }
            } catch (err) {
                console.error('复制失败: ', err);
            }
        }

        // Initialize editors when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM 加载完成，检查 Monaco 容器...');
            
            // Check if containers exist and have proper dimensions
            const dockerfileContainer = document.getElementById('dockerfile-editor');
            const composeContainer = document.getElementById('compose-editor');
            
            if (dockerfileContainer) {
                console.log('Dockerfile 容器已找到:', dockerfileContainer.offsetWidth, 'x', dockerfileContainer.offsetHeight);
            }
            if (composeContainer) {
                console.log('Compose 容器已找到:', composeContainer.offsetWidth, 'x', composeContainer.offsetHeight);
            }
            
            initializeEditors();
        });

        // Handle window resize for Monaco editors
        window.addEventListener('resize', () => {
            if (dockerfileEditor) dockerfileEditor.layout();
            if (composeEditor) composeEditor.layout();
        });
    </script>
</body>
</html>