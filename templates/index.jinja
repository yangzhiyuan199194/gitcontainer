<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>启智自动化构建Demo</title>
    
    <!-- Favicon links -->
    <link rel="icon" type="image/png" sizes="16x16" href="/static/icons8-docker-doodle-16.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/static/icons8-docker-doodle-32.png">
    <link rel="apple-touch-icon" href="/static/icons8-docker-doodle-120.png">
    <link rel="shortcut icon" href="/static/icons8-docker-doodle-32.png">
    
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.min.js"></script>
    <style>
        .loader {
            border: 4px solid #E6F2FF;
            border-top: 4px solid #4A90E2;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .monaco-container {
            height: 400px;
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
            position: relative;
            overflow: hidden;
            background: #ffffff;
        }
        .monaco-container > div {
            width: 100%;
            height: 100%;
        }
        .monaco-container-compose {
            height: 250px;
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
            position: relative;
            overflow: hidden;
            background: #ffffff;
        }
        .monaco-container-compose > div {
            width: 100%;
            height: 100%;
        }
        .step-active {
            border-color: #4A90E2;
            background-color: #EFF6FF;
        }
        .step-completed {
            border-color: #10B981;
            background-color: #F0FDF4;
        }
        .step-failed {
            border-color: #EF4444;
            background-color: #FEF2F2;
        }
        .step-inactive {
            border-color: #E5E7EB;
            background-color: #FFFFFF;
        }
        .card {
            background: #FFFFFF;
            border: 1px solid #E5E7EB;
            border-radius: 0.5rem;
            box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        }
        .btn-primary {
            background-color: #4A90E2;
            color: white;
            border: 1px solid #4A90E2;
            border-radius: 0.375rem;
            font-weight: 500;
            transition: all 0.2s;
        }
        .btn-primary:hover {
            background-color: #3A7BC8;
            border-color: #3A7BC8;
        }
        .form-input {
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
            padding: 0.75rem 1rem;
        }
        .form-input:focus {
            outline: none;
            border-color: #4A90E2;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }
        .main-container {
            width: 80%;
        }
        /* Model selector styles */
        .model-selector {
            position: relative;
            display: inline-block;
        }
        .model-selector select {
            appearance: none;
            background-color: #fff;
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
            padding: 0.5rem 2.5rem 0.5rem 1rem;
            font-size: 0.875rem;
            line-height: 1.25rem;
            color: #374151;
            cursor: pointer;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }
        .model-selector select:focus {
            outline: none;
            border-color: #4A90E2;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }
        .model-selector label {
            position: absolute;
            top: -0.5rem;
            left: 0.75rem;
            background-color: #fff;
            padding: 0 0.25rem;
            font-size: 0.75rem;
            color: #4A90E2;
            font-weight: 500;
        }
        /* 内容显示区域样式，支持HTML内容 */
        #content-display {
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.875rem; /* 14px */
            line-height: 1.25rem; /* 20px */
            white-space: pre-wrap;
            word-break: break-word;
            height: 32rem; /* 增大高度到 h-[512px] (32rem) */
            min-height: 24rem; /* 最小高度保持 h-96 */
            max-height: 75vh; /* 最大高度不超过视口的75% */
            overflow-y: auto;
            background-color: #000000;
            color: #00FF00; /* 默认绿色文本 */
            resize: vertical; /* 允许垂直调整大小 */
        }
        
        /* 可调整大小的容器 */
        .resizable-container {
            resize: vertical;
            overflow: hidden;
            min-height: 24rem;
            max-height: 75vh;
            position: relative;
        }
        
        /* 调整大小的手柄 */
        .resize-handle {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 10px;
            background: linear-gradient(to bottom, #E5E7EB 0%, #E5E7EB 20%, transparent 20%);
            cursor: ns-resize;
            border-bottom: 1px solid #E5E7EB;
        }
        
        /* 内容显示区域在可调整容器中 */
        #content-display {
            height: calc(100% - 10px); /* 减去手柄的高度 */
            overflow-y: auto;
        }
        
        /* Build history item */
        .build-item {
            transition: all 0.2s;
        }
        .build-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen flex flex-col">
    <!-- Header -->
    <header class="border-b border-gray-200 bg-white">
        <div class="main-container mx-auto px-4 py-4 flex justify-between items-center">
            <h1 class="text-2xl font-bold">
                <a href="/" class="hover:opacity-80 transition-opacity">
                    <span class="text-gray-900">启智</span><span class="text-[#4A90E2]">自动化构建</span>
                </a>
            </h1>
            {% if available_models and available_models|length > 1 %}
            <div class="model-selector">
                <label for="model-select">AI 模型</label>
                <select id="model-select" name="model" class="model-select" onchange="updateModel(this.value)">
                    {% for model in available_models %}
                    <option value="{{ model }}" {% if model == current_model %}selected{% endif %}>{{ model }}</option>
                    {% endfor %}
                </select>
            </div>
            {% endif %}
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-container mx-auto px-4 py-8 flex-grow">
        <!-- Hero Section -->
        <div class="mb-10 text-center">
            <p class="text-gray-600 text-lg max-w-2xl mx-auto">
                粘贴任何 GitHub 仓库 URL，获取由AI为您量身定制的智能服务
            </p>
        </div>

        <!-- Error Message -->
        {% if error %}
        <div class="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700">
            {{ error }}
        </div>
        {% endif %}

        <!-- Pre-filled URL notification -->
        {% if pre_filled %}
        <div class="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg text-green-700">
            <div class="flex items-center gap-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span class="font-medium">太好了！我们已从 URL 自动检测到您的 GitHub 仓库。</span>
            </div>
            <p class="text-sm mt-1">您现在可以为此仓库生成 Dockerfile，或根据需要修改 URL。</p>
        </div>
        {% endif %}

        <!-- Input Form -->
        <div class="mb-8">
            <div class="card p-6">
                <form method="post" class="flex flex-col md:flex-row gap-4" onsubmit="prepareFormSubmit(event)">
                    <div class="flex-1">
                        <input 
                            type="url" 
                            name="repo_url" 
                            id="repo_url"
                            value="{{ repo_url }}"
                            placeholder="https://github.com/用户名/仓库名"
                            required
                            class="form-input w-full text-base"
                        >
                    </div>
                    <div class="md:w-auto">
                        <button 
                            type="submit"
                            class="btn-primary py-3 px-6 text-base w-full"
                        >
                            自动化构建
                        </button>
                    </div>
                    <input type="hidden" name="additional_instructions_hidden" id="additional_instructions_hidden" value="">
                    <input type="hidden" name="model" id="model_hidden" value="{{ current_model }}">
                </form>
                
                <!-- Examples and Additional instructions row -->
                <div class="mt-6 flex flex-col md:flex-row md:justify-between md:items-start gap-4">
                    <!-- Additional instructions checkbox -->
                    <div class="flex-shrink-0 self-start md:self-center">
                        <div class="flex items-center">
                            <input type="checkbox" 
                                   id="show_instructions" 
                                   onchange="toggleInstructions()"
                                   class="w-4 h-4 text-[#4A90E2] bg-gray-100 border-gray-300 rounded focus:ring-[#4A90E2] focus:ring-2">
                            <label for="show_instructions" class="ml-2 text-gray-700">附加说明</label>
                        </div>
                    </div>
                </div>
                
                <!-- Additional instructions textarea (spans full width) -->
                <div id="instructions_container" class="hidden mt-4">
                    <textarea 
                        id="additional_instructions"
                        name="additional_instructions"
                        placeholder="例如，使用 Alpine Linux，包含特定工具，针对生产环境优化等"
                        rows="3"
                        class="form-input w-full text-sm"
                    ></textarea>
                </div>
            </div>
        </div>

        <!-- Successful Builds Section -->
        {% if successful_builds and successful_builds|length > 0 %}
        <div class="mb-8">
            <div class="card p-6">
                <h2 class="text-xl font-bold text-gray-900 mb-4">已构建成功的项目</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {% for build in successful_builds %}
                    <a href="/builds/{{ build.repo_url | replace('https://github.com/', '') | replace('/', '_') }}" 
                       class="build-item block border border-gray-200 rounded-lg p-4 hover:border-blue-300">
                        <div class="flex justify-between items-start">
                            <div>
                                <h3 class="font-medium text-gray-900 truncate">{{ build.result.project_name or build.repo_info.name or 'Unknown Project' }}</h3>
                                <p class="text-sm text-gray-500 truncate mt-1">{{ build.repo_url }}</p>
                            </div>
                            <span class="inline-flex items-center text-xs text-green-600 bg-green-50 px-2 py-1 rounded-full">
                                <span class="w-1.5 h-1.5 rounded-full bg-green-500 mr-1"></span>
                                成功
                            </span>
                        </div>
                        <div class="mt-3 flex justify-between items-center text-xs text-gray-500">
                            <span>{{ build.build_time[:19].replace('T', ' ') }}</span>
                            <span>{{ build.result.technology_stack or 'Unknown Stack' }}</span>
                        </div>
                    </a>
                    {% endfor %}
                </div>
            </div>
        </div>
        {% endif %}

        <!-- Loading State -->
        {% if loading %}
        <div class="card p-8">
            <div class="flex flex-col items-center space-y-4">
                <div class="loader"></div>
                <p class="text-lg font-medium text-gray-900">正在分析仓库并生成 Dockerfile...</p>
                <p class="text-sm text-gray-600">这可能需要一些时间</p>
            </div>
        </div>
        {% endif %}

        <!-- Streaming State -->
        {% if streaming %}
        <div id="streaming-container">
            <div class="card p-6">
                
                <!-- Status Display -->
                <div class="text-center mb-6">
                    <div class="loader mx-auto mb-4"></div>
                    <h2 class="text-xl font-bold text-gray-900 mb-2">正在自动化构建</h2>
                    <p id="status-message" class="text-gray-600">连接中...</p>
                </div>

                <!-- Progress Steps -->
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <div id="step-clone" class="border border-gray-200 rounded p-4 transition-all duration-300">
                        <div class="flex items-center">
                            <div class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center mr-3">
                                <span class="text-sm font-bold">1</span>
                            </div>
                            <span class="font-medium">克隆仓库</span>
                        </div>
                    </div>
                    <div id="step-analyze" class="border border-gray-200 rounded p-4 transition-all duration-300">
                        <div class="flex items-center">
                            <div class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center mr-3">
                                <span class="text-sm font-bold">2</span>
                            </div>
                            <span class="font-medium">
                                分析结构
                                <span class="block text-xs text-gray-500 mt-1">todo 更好的代码分析</span>
                            </span>
                        </div>
                    </div>
                    <div id="step-generate" class="border border-gray-200 rounded p-4 transition-all duration-300">
                        <div class="flex items-center">
                            <div class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center mr-3">
                                <span class="text-sm font-bold">3</span>
                            </div>
                            <span class="font-medium">生成 Dockerfile
                            <span class="block text-xs text-gray-500 mt-1">todo 参考启智的镜像仓库</span>
                        </div>
                    </div>
                    <div id="step-build" class="border border-gray-200 rounded p-4 transition-all duration-300">
                        <div class="flex items-center">
                            <div class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center mr-3">
                                <span class="text-sm font-bold">4</span>
                            </div>
                            <span class="font-medium">构建镜像
                            <span class="block text-xs text-gray-500 mt-1">todo 构建失败反思</span>
                        </div>
                    </div>
                    <div id="step-build" class="border border-gray-200 rounded p-4 transition-all duration-300">
                        <div class="flex items-center">
                            <div class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center mr-3">
                                <span class="text-sm font-bold text-gray-500">5</span>
                            </div>
                            <span class="font-medium text-gray-500">启智环境导入
                            <span class="block text-xs text-gray-500 mt-1">代码/模型/数据</span>
                        </div>
                    </div>
                    <div id="step-build" class="border border-gray-200 rounded p-4 transition-all duration-300">
                        <div class="flex items-center">
                            <div class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center mr-3">
                                <span class="text-sm font-bold text-gray-500">6</span>
                            </div>
                            <span class="font-medium text-gray-500">生成验证代码</span>
                        </div>
                    </div>
                    <div id="step-build" class="border border-gray-200 rounded p-4 transition-all duration-300">
                        <div class="flex items-center">
                            <div class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center mr-3">
                                <span class="text-sm font-bold text-gray-500">7</span>
                            </div>
                            <span class="font-medium text-gray-500">自动验证环境</span>
                        </div>
                    </div>
                    <div id="step-build" class="border border-gray-200 rounded p-4 transition-all duration-300">
                        <div class="flex items-center">
                            <div class="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center mr-3">
                                <span class="text-sm font-bold text-gray-500">8</span>
                            </div>
                            <span class="font-medium text-gray-500">启智环境交付</span>
                        </div>
                    </div>
                </div>
                
                <!-- Content Display Area -->
                <div id="content-display-area" class="mt-6">
                    <div class="border border-gray-200 rounded-lg p-4 bg-black resizable-container">
                        <div id="content-display" class="font-mono text-green-400 text-sm whitespace-pre-wrap break-words"></div>
                        <div class="resize-handle"></div>
                    </div>
                </div>

            </div>
        </div>

        <!-- Results Container (hidden initially) -->
        <div id="results-container" class="hidden">
            <div class="card p-6 space-y-6">
                <!-- Results content will be populated by JavaScript -->
            </div>
        </div>
        {% endif %}

        <!-- Results (for non-streaming requests) -->
        {% if result %}
        <div class="card p-6 space-y-6">
            
            <!-- Project Info -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div class="border border-gray-200 rounded p-4">
                    <h3 class="font-medium text-gray-900 mb-1">项目</h3>
                    <p class="text-sm text-gray-600">{{ result.project_name }}</p>
                </div>
                <div class="border border-gray-200 rounded p-4">
                    <h3 class="font-medium text-gray-900 mb-1">技术栈</h3>
                    <p class="text-sm text-gray-600">{{ result.technology_stack }}</p>
                </div>
                <div class="border border-gray-200 rounded p-4">
                    <h3 class="font-medium text-gray-900 mb-1">仓库大小</h3>
                    <p class="text-sm text-gray-600">{{ result.repo_info.file_count }} 个文件 ({{ result.repo_info.size_mb }} MB)</p>
                </div>
            </div>

            <!-- Dockerfile -->
            <div>
                <div class="flex justify-between items-center mb-3">
                    <h3 class="text-lg font-medium text-gray-900">Dockerfile</h3>
                    <button 
                        onclick="copyDockerfile()"
                        class="btn-primary px-4 py-2 flex items-center gap-2 text-sm"
                    >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                        </svg>
                        复制 Dockerfile
                    </button>
                </div>
                <div class="border border-gray-200 rounded">
                    <div class="monaco-container">
                        <div id="dockerfile-editor"></div>
                    </div>
                </div>
            </div>

            <!-- Docker Compose (if available) -->
            {% if result.docker_compose %}
            <div>
                <div class="flex justify-between items-center mb-3">
                    <h3 class="text-lg font-medium text-gray-900">docker-compose.yml</h3>
                    <button 
                        onclick="copyCompose()"
                        class="btn-primary px-4 py-2 flex items-center gap-2 text-sm"
                    >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                        </svg>
                        复制 Compose
                    </button>
                </div>
                <div class="border border-gray-200 rounded">
                    <div class="monaco-container-compose">
                        <div id="compose-editor"></div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Reasoning & Notes -->
            {% if result.reasoning or result.additional_notes %}
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                {% if result.reasoning %}
                <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-3">基础镜像选择理由</h3>
                    <div class="border border-gray-200 rounded p-4">
                        <p class="text-sm text-gray-600">{{ result.reasoning }}</p>
                    </div>
                </div>
                {% endif %}
                
                {% if result.additional_notes %}
                <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-3">附加说明</h3>
                    <div class="border border-gray-200 rounded p-4">
                        <p class="text-sm text-gray-600 whitespace-pre-wrap">{{ result.additional_notes }}</p>
                    </div>
                </div>
                {% endif %}
            </div>
            {% endif %}
            
            <!-- Docker Image Build Info -->
            {% if result.image_build %}
            <div>
                <h3 class="text-lg font-medium text-gray-900 mb-3">Docker 镜像构建</h3>
                <div class="border border-gray-200 rounded p-4">
                {% if result.image_build.success %}
                    <div class="bg-green-50 border border-green-200 rounded p-3 mb-3">
                        <p class="text-green-700 font-medium">{{ result.image_build.message }}</p>
                    </div>
                    <div class="mt-3">
                        <h4 class="font-medium text-gray-700 mb-2">镜像标签:</h4>
                        <div class="bg-gray-50 p-3 rounded font-mono text-sm break-words">
                            {{ result.image_build.image_tag }}
                        </div>
                        <p class="mt-2 text-sm text-gray-600">您可以使用以下命令运行此镜像:</p>
                        <div class="mt-1 bg-gray-800 text-green-400 p-3 rounded font-mono text-sm">
                            docker run -p 8000:8000 {{ result.image_build.image_tag }}
                        </div>
                    </div>
                {% else %}
                    <div class="bg-red-50 border border-red-200 rounded p-3">
                        <p class="text-red-700 font-medium">构建失败: {{ result.image_build.error }}</p>
                    </div>
                    
                    {% if result.image_build.build_log %}
                    <div class="mt-3">
                        <h4 class="font-medium text-gray-700 mb-2">构建日志:</h4>
                        <div class="bg-gray-800 text-red-400 p-3 rounded font-mono text-xs overflow-auto max-h-40">
                            {{ result.image_build.build_log }}
                        </div>
                    </div>
                    {% endif %}
                    
                    <div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded">
                        <p class="text-blue-700 text-sm">
                            <strong>提示:</strong> 构建失败可能是由于网络问题或Docker Hub镜像拉取问题导致的。
                            您可以手动复制Dockerfile内容并使用以下命令构建:
                        </p>
                        <div class="mt-2 bg-gray-800 text-yellow-400 p-2 rounded font-mono text-xs">
                            docker build --no-cache -t your-image-name .
                        </div>
                    </div>
                {% endif %}
                </div>
            </div>
            {% endif %}

        </div>
        {% endif %}
    </main>

    <!-- Footer -->
    <footer class="border-t border-gray-200 mt-auto bg-white">
    </footer>

    <script>
        // Example submission function
        function submitExample(repoUrl) {
            const input = document.getElementById('repo_url');
            input.value = repoUrl;
            input.focus();
            // Optionally auto-submit the form
            // input.form.submit();
        }

        // Toggle additional instructions visibility
        function toggleInstructions() {
            const checkbox = document.getElementById('show_instructions');
            const container = document.getElementById('instructions_container');
            
            if (checkbox.checked) {
                container.classList.remove('hidden');
                container.classList.add('block');
            } else {
                container.classList.add('hidden');
                container.classList.remove('block');
                // Clear the textarea when hiding
                document.getElementById('additional_instructions').value = '';
            }
        }

        // Update model hidden field when model is changed
        function updateModel(model) {
            document.getElementById('model_hidden').value = model;
            // Save user's model preference to localStorage
            localStorage.setItem('selectedModel', model);
        }

        // Prepare form submission by copying additional instructions to hidden input
        function prepareFormSubmit(event) {
            const checkbox = document.getElementById('show_instructions');
            const instructionsTextarea = document.getElementById('additional_instructions');
            const hiddenInput = document.getElementById('additional_instructions_hidden');
            
            if (checkbox.checked && instructionsTextarea.value.trim()) {
                hiddenInput.value = instructionsTextarea.value.trim();
            } else {
                hiddenInput.value = '';
            }
            
            // Allow form to submit normally
            return true;
        }

        // Set the model selector to the user's previously selected model
        function setModelFromCache() {
            const savedModel = localStorage.getItem('selectedModel');
            if (savedModel) {
                const modelSelector = document.getElementById('model-select');
                if (modelSelector) {
                    // Check if the saved model is in the available options
                    const options = Array.from(modelSelector.options);
                    const modelExists = options.some(option => option.value === savedModel);
                    
                    if (modelExists) {
                        modelSelector.value = savedModel;
                        // Also update the hidden field
                        document.getElementById('model_hidden').value = savedModel;
                    }
                }
            }
        }

        // Monaco Editor setup
        let dockerfileEditor = null;
        let composeEditor = null;

        // Configure Monaco Editor loader
        require.config({ 
            paths: { 
                'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' 
            } 
        });

        // Initialize Monaco Editors when available
        function initializeEditors() {
            console.log('正在尝试初始化 Monaco 编辑器...');
            require(['vs/editor/editor.main'], function() {
                console.log('Monaco 编辑器加载成功');
            }, function(error) {
                console.error('加载 Monaco 编辑器失败:', error);
            });
        }

        function createMonacoEditor(elementId, content, language) {
            console.log('正在为:', elementId, '创建 Monaco 编辑器，语言:', language);
            const element = document.getElementById(elementId);
            if (!element) {
                console.error('未找到元素:', elementId);
                return null;
            }
            
            return null;
        }

        // Copy functions for shell-style display boxes
        function copyDockerfile() {
            let content = '';
            
            // 从shell风格展示框获取内容
            const dockerfileDisplay = document.getElementById('dockerfile-display');
            if (dockerfileDisplay) {
                content = dockerfileDisplay.textContent || dockerfileDisplay.innerText || '';
            }
            
            if (content) {
                const button = event.target.closest('button');
                copyToClipboard(content, 'Dockerfile 已复制！', button);
            } else {
                console.warn('No Dockerfile content to copy');
            }
        }

        function copyCompose() {
            let content = '';
            
            // 从shell风格展示框获取内容
            const composeDisplay = document.getElementById('compose-display');
            if (composeDisplay) {
                content = composeDisplay.textContent || composeDisplay.innerText || '';
            }
            
            if (content) {
                const button = event.target.closest('button');
                copyToClipboard(content, 'Compose 文件已复制！', button);
            } else {
                console.warn('No compose content to copy');
            }
        }
        
        // 通用复制到剪贴板函数
        function copyToClipboard(text, message, button) {
            if (!text) {
                console.warn('No text to copy');
                return;
            }
            
            // 创建临时textarea元素
            const textarea = document.createElement('textarea');
            textarea.value = text;
            document.body.appendChild(textarea);
            textarea.select();
            
            try {
                // 执行复制
                const successful = document.execCommand('copy');
                if (successful) {
                    // 显示成功消息
                    if (button) {
                        const originalText = button.innerHTML;
                        button.innerHTML = message;
                        setTimeout(() => {
                            button.innerHTML = originalText;
                        }, 2000);
                    }
                    console.log('Copying to clipboard was successful!');
                } else {
                    console.error('Copying to clipboard failed!');
                }
            } catch (err) {
                console.error('Failed to copy: ', err);
            }
            
            // 移除临时元素
            document.body.removeChild(textarea);
        }

        // WebSocket streaming functionality
        {% if streaming %}
        const session_id = "{{ session_id }}";
        let socket;
        let currentStep = null;
        
        // 定义步骤顺序
        const stepOrder = ['clone', 'analyze', 'generate', 'build'];
        
        function connectWebSocket() {
            if (!session_id) {
                console.log('No session ID provided, skipping WebSocket connection');
                return;
            }
            
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const ws_url = protocol + '//' + window.location.host + '/ws/' + session_id;
            console.log('Connecting to WebSocket:', ws_url);
            
            socket = new WebSocket(ws_url);
            
            socket.onopen = function(event) {
                console.log('WebSocket connected');
                showStatus('已连接到服务器...');
            };
            
            socket.onmessage = function(event) {
                const data = JSON.parse(event.data);
                console.log('Received message:', data);
                
                switch(data.type) {
                    case 'status':
                        showStatus(data.content);
                        // Update step status based on message content
                        console.log('Processing status message:', data.content);
                        if (data.content.includes('克隆仓库') || data.content.includes('Cloning repository')) {
                            console.log('Updating clone step to active');
                            updateStepStatus('clone', 'active');
                            // 只有当前步骤不是clone时才更新currentStep和显示分隔符
                            if (currentStep !== 'clone') {
                                currentStep = 'clone';
                                // 添加带步骤说明的分隔符
                                showStepContent('content', '\n[克隆仓库阶段开始]\n' + '='.repeat(50) + '\n');
                            }
                        } else if (data.content.includes('分析仓库结构') || data.content.includes('Analyzing repository structure')) {
                            console.log('Updating clone step to completed and analyze step to active');
                            updateStepStatus('clone', 'completed');
                            updateStepStatus('analyze', 'active');
                            // 只有当前步骤不是analyze时才更新currentStep和显示分隔符
                            if (currentStep !== 'analyze') {
                                currentStep = 'analyze';
                                // 添加带步骤说明的分隔符
                                showStepContent('content', '\n[分析结构阶段开始]\n' + '='.repeat(50) + '\n');
                            }
                        } else if (data.content.includes('生成 Dockerfile') || data.content.includes('Generating Dockerfile')) {
                            console.log('Updating analyze step to completed and generate step to active');
                            updateStepStatus('analyze', 'completed');
                            updateStepStatus('generate', 'active');
                            // 只有当前步骤不是generate时才更新currentStep和显示分隔符
                            if (currentStep !== 'generate') {
                                currentStep = 'generate';
                                // 添加带步骤说明的分隔符
                                showStepContent('content', '\n[生成Dockerfile阶段开始]\n' + '='.repeat(50) + '\n');
                            }
                        } else if (data.content.includes('构建 Docker 镜像') || data.content.includes('Building Docker image')) {
                            console.log('Updating generate step to completed and build step to active');
                            updateStepStatus('generate', 'completed');
                            updateStepStatus('build', 'active');
                            // 只有当前步骤不是build时才更新currentStep和显示分隔符
                            if (currentStep !== 'build') {
                                currentStep = 'build';
                                // 添加带步骤说明的分隔符
                                showStepContent('content', '\n[构建镜像阶段开始]\n' + '='.repeat(50) + '\n');
                            }
                        }
                        break;
                    case 'chunk':
                        // 将所有chunk消息显示到独立的内容显示区域，不添加步骤前缀
                        showStepContent('content', data.content);
                        break;
                    case 'stream_start':
                        showStatus('开始生成...');
                        break;
                    case 'build_log':
                        // 将构建日志显示到独立的内容显示区域，不添加步骤前缀
                        showStepContent('content', data.content);
                        break;
                    case 'phase_start':
                        // 处理阶段开始消息，根据phase_type应用不同颜色
                        let startContent = data.content;
                        if (data.phase_type === 'smart') {
                            startContent = '<span style="color: #FFFF00; font-weight: bold;">[智能阶段] ' + data.content + '</span>';
                        } else {
                            startContent = '<span style="color: #00FFFF; font-weight: bold;">[常规阶段] ' + data.content + '</span>';
                        }
                        showStepContent('content', startContent + '\n' + '='.repeat(50) + '\n');
                        break;
                    case 'phase_end':
                        // 处理阶段结束消息，根据phase_type应用不同颜色
                        let endContent = data.content;
                        if (data.phase_type === 'smart') {
                            endContent = '<span style="color: #FFFF00; font-weight: bold;">[智能阶段] ' + data.content + '</span>';
                        } else {
                            endContent = '<span style="color: #00FFFF; font-weight: bold;">[常规阶段] ' + data.content + '</span>';
                        }
                        showStepContent('content', endContent + '\n' + '='.repeat(50) + '\n');
                        break;
                    case 'error':
                        // Mark current step as failed and show detailed error
                        if (currentStep) {
                            updateStepStatus(currentStep, 'failed');
                        }
                        
                        // Show error in content display area with HTML formatting
                        const errorContent = `<span style="color: #FF0000; font-weight: bold;">❌ 错误: ${data.content}</span>`;
                        showStepContent('content', errorContent + '\n');
                        
                        // Also show error in status message
                        showError(data.content);
                        break;
                    case 'partial_complete':
                        console.log('Marking build step as failed but showing generated Dockerfile');
                        // 即使构建失败也要显示生成的Dockerfile
                        updateStepStatus('build', 'failed');
                        // 添加完成分隔符
                        showStepContent('content', '\n[任务完成 - 构建失败但已生成Dockerfile]\n' + '='.repeat(50) + '\n');
                                                
                        // 保持内容显示区域可见
                        const contentDisplayArea = document.getElementById('content-display-area');
                        if (contentDisplayArea) {
                            contentDisplayArea.style.display = 'block';
                        }
                                                
                        // 确保在DOM更新完成后显示结果
                        setTimeout(() => {
                            if (typeof showComplete === 'function') {
                                showComplete(data.result);
                            } else {
                                console.error('showComplete function not found');
                            }
                        }, 100);
                        break;
                    case 'complete':
                        console.log('Marking build step as completed');
                        // 检查result中的image_build是否成功
                        if (data.result && data.result.image_build && data.result.image_build.success) {
                            updateStepStatus('build', 'completed');
                            showStepContent('content', '\n[任务完成]\n' + '='.repeat(50) + '\n');
                        } else {
                            updateStepStatus('build', 'failed');
                            showStepContent('content', '\n[任务完成 - 构建失败但已生成Dockerfile]\n' + '='.repeat(50) + '\n');
                        }
                                                
                        // 保持内容显示区域可见
                        const contentDisplayAreaComplete = document.getElementById('content-display-area');
                        if (contentDisplayAreaComplete) {
                            contentDisplayAreaComplete.style.display = 'block';
                        }
                                                
                        // 确保在DOM更新完成后显示结果
                        setTimeout(() => {
                            if (typeof showComplete === 'function') {
                                showComplete(data.result);
                            } else {
                                console.error('showComplete function not found');
                            }
                        }, 100);
                        break;
                    default:
                        console.log('Unknown message type:', data.type);
                }
            };
            
            socket.onclose = function(event) {
                console.log('WebSocket closed:', event);
                // Try to get final result if available
                if (event.wasClean) {
                    showStatus('连接已关闭');
                } else {
                    showError('连接意外断开');
                }
                
                // 确保内容显示区域保持可见
                const contentDisplayArea = document.getElementById('content-display-area');
                if (contentDisplayArea) {
                    contentDisplayArea.style.display = 'block';
                }
            };
            
            socket.onerror = function(error) {
                console.log('WebSocket error:', error);
                showError('连接错误: ' + error);
                
                // 确保内容显示区域保持可见
                const contentDisplayArea = document.getElementById('content-display-area');
                if (contentDisplayArea) {
                    contentDisplayArea.style.display = 'block';
                }
            };
        }
        
        function showStatus(message) {
            const statusMessage = document.getElementById('status-message');
            if (statusMessage) {
                statusMessage.textContent = message;
            }
        }
        
        function updateStepStatus(step, status) {
            const stepElement = document.getElementById(`step-${step}`);
            console.log(`Updating step ${step} to status ${status}`);
            
            if (!stepElement) {
                console.log(`Step element for ${step} not found`);
                return;
            }
            
            // Log current classes
            console.log(`Current classes for step-${step}:`, stepElement.className);
            
            // Remove all status classes
            stepElement.classList.remove('step-active', 'step-completed', 'step-failed');
            
            // Add appropriate class based on status
            if (status === 'active') {
                stepElement.classList.add('step-active');
                console.log(`Step ${step} marked as active`);
            } else if (status === 'completed') {
                stepElement.classList.add('step-completed');
                console.log(`Step ${step} marked as completed`);
            } else if (status === 'failed') {
                stepElement.classList.add('step-failed');
                console.log(`Step ${step} marked as failed`);
            }
            
            // Log updated classes
            console.log(`Updated classes for step-${step}:`, stepElement.className);
        }
        
        // 新增函数：完成指定步骤之前的所有步骤
        function completePreviousSteps(currentStep) {
            const currentIndex = stepOrder.indexOf(currentStep);
            if (currentIndex === -1) return;
            
            // 完成所有之前的步骤
            for (let i = 0; i < currentIndex; i++) {
                updateStepStatus(stepOrder[i], 'completed');
            }
        }
        
        function showStepContent(step, content) {
            const contentDisplay = document.getElementById('content-display');
            if (contentDisplay) {
                // 检查内容是否包含HTML标签
                if (content.includes('<') && content.includes('>')) {
                    // 如果是HTML内容，直接添加
                    contentDisplay.innerHTML += content;
                } else {
                    // 如果是纯文本，进行转义后添加
                    const escapedContent = content
                        .replace(/&/g, '&amp;')
                        .replace(/</g, '&lt;')
                        .replace(/>/g, '&gt;')
                        .replace(/"/g, '&quot;')
                        .replace(/'/g, '&#039;')
                        .replace(/\n/g, '<br>');
                    contentDisplay.innerHTML += escapedContent;
                }
                // 滚动到底部 - 使用更可靠的方法
                setTimeout(() => {
                    contentDisplay.scrollTop = contentDisplay.scrollHeight;
                }, 10);
            }
        }
        
        function appendStreamingContent(content) {
            // This function is kept for backward compatibility
            const contentDisplay = document.getElementById('content-display');
            if (contentDisplay) {
                // 检查内容是否包含HTML标签
                if (content.includes('<') && content.includes('>')) {
                    // 如果是HTML内容，直接添加
                    contentDisplay.innerHTML += content;
                } else {
                    // 如果是纯文本，进行转义后添加
                    const escapedContent = content
                        .replace(/&/g, '&amp;')
                        .replace(/</g, '&lt;')
                        .replace(/>/g, '&gt;')
                        .replace(/"/g, '&quot;')
                        .replace(/'/g, '&#039;')
                        .replace(/\n/g, '<br>');
                    contentDisplay.innerHTML += escapedContent;
                }
                // 滚动到底部 - 使用更可靠的方法
                setTimeout(() => {
                    contentDisplay.scrollTop = contentDisplay.scrollHeight;
                }, 10);
            }
        }
        
        function appendBuildLog(content) {
            // This function is kept for backward compatibility
            const contentDisplay = document.getElementById('content-display');
            if (contentDisplay) {
                // 检查内容是否包含HTML标签
                if (content.includes('<') && content.includes('>')) {
                    // 如果是HTML内容，直接添加
                    contentDisplay.innerHTML += content;
                } else {
                    // 如果是纯文本，进行转义后添加
                    const escapedContent = content
                        .replace(/&/g, '&amp;')
                        .replace(/</g, '&lt;')
                        .replace(/>/g, '&gt;')
                        .replace(/"/g, '&quot;')
                        .replace(/'/g, '&#039;')
                        .replace(/\n/g, '<br>');
                    contentDisplay.innerHTML += escapedContent;
                }
                // 滚动到底部 - 使用更可靠的方法
                setTimeout(() => {
                    contentDisplay.scrollTop = contentDisplay.scrollHeight;
                }, 10);
            }
        }
        
        function showError(error) {
            const contentDisplay = document.getElementById('content-display');
            if (contentDisplay) {
                const errorContent = '<span style="color: #FF0000; font-weight: bold;">❌ 错误: ' + error + '</span>';
                contentDisplay.innerHTML += '\n' + '='.repeat(50) + '\n' + errorContent + '\n' + '='.repeat(50) + '\n<br>';
                // 滚动到底部 - 使用更可靠的方法
                setTimeout(() => {
                    contentDisplay.scrollTop = contentDisplay.scrollHeight;
                }, 10);
            }
        }
        
        // 添加showComplete函数，用于展示生成的Dockerfile和相关信息
        function showComplete(result) {
            console.log('Showing complete result:', result);
            
            // 隐藏加载动画和状态消息
            const loadingIndicator = document.getElementById('loading-indicator');
            const statusMessage = document.getElementById('status-message');
            if (loadingIndicator) loadingIndicator.style.display = 'none';
            if (statusMessage) statusMessage.style.display = 'none';
            
            // 保持内容显示区域可见，但添加分隔符
            const contentDisplay = document.getElementById('content-display');
            if (contentDisplay) {
                contentDisplay.innerHTML += '\n' + '='.repeat(50) + '\n';
                contentDisplay.innerHTML += '<span style="color: #00FFFF; font-weight: bold;">[任务完成]</span>\n';
                contentDisplay.innerHTML += '='.repeat(50) + '\n';
            }
            
            // 在内容显示区域下方显示结果区域
            const resultsContainer = document.getElementById('results-container');
            if (resultsContainer) {
                resultsContainer.classList.remove('hidden');
                // 填充结果内容
                populateResults(resultsContainer, result);
            } else {
                console.error('Results container not found');
            }
        }
        
        // 填充结果内容的函数
        function populateResults(container, result) {
            if (!result) return;
            
            // 创建结果HTML
            let html = `
                <!-- Completion Header -->
                <div class="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                    <div class="flex items-center gap-2">
                        <svg class="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <span class="font-medium text-green-700">任务已完成</span>
                    </div>
                </div>
                
                <!-- Project Info -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <div class="border border-gray-200 rounded p-4">
                        <h3 class="font-medium text-gray-900 mb-1">项目</h3>
                        <p class="text-sm text-gray-600">${result.project_name || 'N/A'}</p>
                    </div>
                    <div class="border border-gray-200 rounded p-4">
                        <h3 class="font-medium text-gray-900 mb-1">技术栈</h3>
                        <p class="text-sm text-gray-600">${result.technology_stack || 'N/A'}</p>
                    </div>
                    <div class="border border-gray-200 rounded p-4">
                        <h3 class="font-medium text-gray-900 mb-1">仓库大小</h3>
                        <p class="text-sm text-gray-600">${result.repo_info?.file_count || 'N/A'} 个文件 (${result.repo_info?.size_mb || 'N/A'} MB)</p>
                    </div>
                </div>

                <!-- Dockerfile -->
                <div class="mb-6">
                    <div class="flex justify-between items-center mb-3">
                        <h3 class="text-lg font-medium text-gray-900">Dockerfile</h3>
                        <button 
                            onclick="copyDockerfile()"
                            class="btn-primary px-4 py-2 flex items-center gap-2 text-sm"
                        >
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                            </svg>
                            复制 Dockerfile
                        </button>
                    </div>
                    <div class="bg-gray-800 text-green-400 font-mono text-sm p-4 rounded-lg overflow-x-auto">
                        <div class="mb-2 flex items-center">
                            <div class="w-3 h-3 rounded-full bg-red-500 mr-2"></div>
                            <div class="w-3 h-3 rounded-full bg-yellow-500 mr-2"></div>
                            <div class="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                            <span class="ml-2">root@container:~#</span>
                        </div>
                        <pre class="p-2 whitespace-pre-wrap break-words" id="dockerfile-display">
${result.dockerfile || '# 未生成 Dockerfile'}
                        </pre>
                    </div>
                </div>
            `;
            // 添加docker-compose部分（如果存在）
            if (result.docker_compose) {
                html += `
                <div class="mb-6">
                    <div class="flex justify-between items-center mb-3">
                        <h3 class="text-lg font-medium text-gray-900">docker-compose.yml</h3>
                        <button 
                            onclick="copyCompose()"
                            class="btn-primary px-4 py-2 flex items-center gap-2 text-sm"
                        >
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                            </svg>
                            复制 Compose
                        </button>
                    </div>
                    <div class="bg-gray-800 text-green-400 font-mono text-sm p-4 rounded-lg overflow-x-auto">
                        <div class="mb-2 flex items-center">
                            <div class="w-3 h-3 rounded-full bg-red-500 mr-2"></div>
                            <div class="w-3 h-3 rounded-full bg-yellow-500 mr-2"></div>
                            <div class="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                            <span class="ml-2">root@container:~#</span>
                        </div>
                        <pre class="p-2 whitespace-pre-wrap break-words" id="compose-display">
${result.docker_compose || '# 未生成 docker-compose.yml'}
                        </pre>
                    </div>
                </div>
                `;
            }
            
            // 添加基础镜像选择理由和附加说明部分
            if (result.reasoning || result.additional_notes) {
                html += `<div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">`;
                
                if (result.reasoning) {
                    html += `
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">基础镜像选择理由</h3>
                        <div class="border border-gray-200 rounded p-4">
                            <p class="text-sm text-gray-600">${result.reasoning}</p>
                        </div>
                    </div>
                    `;
                }
                
                if (result.additional_notes) {
                    html += `
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">附加说明</h3>
                        <div class="border border-gray-200 rounded p-4">
                            <p class="text-sm text-gray-600 whitespace-pre-wrap">${result.additional_notes}</p>
                        </div>
                    </div>
                    `;
                }
                
                html += `</div>`;
            }
            
            // 添加Docker镜像构建信息
            if (result.image_build) {
                html += `
                <div class="mb-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Docker 镜像构建</h3>
                    <div class="border border-gray-200 rounded p-4">
                `;
                
                if (result.image_build.success) {
                    html += `
                        <div class="bg-green-50 border border-green-200 rounded p-3 mb-3">
                            <p class="text-green-700 font-medium">✅ 构建成功: ${result.image_build.image_tag || 'N/A'}</p>
                        </div>
                        <div class="mt-3">
                            <h4 class="font-medium text-gray-700 mb-2">镜像标签:</h4>
                            <div class="bg-gray-50 p-3 rounded font-mono text-sm break-words">
                                ${result.image_build.image_tag || 'N/A'}
                            </div>
                            <p class="mt-2 text-sm text-gray-600">您可以使用以下命令运行此镜像:</p>
                            <div class="mt-1 bg-gray-800 text-green-400 p-3 rounded font-mono text-sm">
                                docker run -p 8000:8000 ${result.image_build.image_tag || 'your-image-name'}
                            </div>
                        </div>
                    `;
                } else {
                    html += `
                        <div class="bg-red-50 border border-red-200 rounded p-3">
                            <p class="text-red-700 font-medium">❌ 构建失败: ${result.image_build.error || '未知错误'}</p>
                        </div>
                    `;
                    
                    if (result.image_build.build_log) {
                        html += `
                        <div class="mt-3">
                            <h4 class="font-medium text-gray-700 mb-2">构建日志:</h4>
                            <div class="bg-gray-800 text-red-400 p-3 rounded font-mono text-xs overflow-auto max-h-40">
                                ${result.image_build.build_log}
                            </div>
                        </div>
                        `;
                    }
                    
                    html += `
                        <div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded">
                            <p class="text-blue-700 text-sm">
                                <strong>提示:</strong> 构建失败可能是由于网络问题或Docker Hub镜像拉取问题导致的。
                                您可以手动复制Dockerfile内容并使用以下命令构建:
                            </p>
                            <div class="mt-2 bg-gray-800 text-yellow-400 p-2 rounded font-mono text-xs">
                                docker build --no-cache -t your-image-name .
                            </div>
                        </div>
                    `;
                }
                
                html += `
                    </div>
                </div>
                `;
            }
            
            // 将HTML插入到容器中
            container.innerHTML = html;
            
            // 初始化编辑器（如果尚未初始化）
            if (typeof initializeEditors === 'function') {
                setTimeout(() => {
                    console.log('Initializing editors');
                    initializeEditors();
                    // 确保编辑器内容正确设置
                    setTimeout(() => {
                        console.log('Setting editor values');
                        if (typeof dockerfileEditor !== 'undefined' && dockerfileEditor) {
                            console.log('Setting Dockerfile editor value');
                            dockerfileEditor.setValue(result.dockerfile || '# 未生成 Dockerfile');
                        } else {
                            console.log('Dockerfile editor not available, using manual initialization');
                            initDockerfileEditorManually(result.dockerfile || '# 未生成 Dockerfile');
                        }
                        
                    }, 100);
                }, 100);
            } else {
                console.log('initializeEditors function not found, using manual initialization');
                // 如果initializeEditors函数不存在，直接初始化编辑器
                setTimeout(() => {
                    initDockerfileEditorManually(result.dockerfile || '# 未生成 Dockerfile');
                }, 100);
            }
        }
        
        // 手动初始化Dockerfile编辑器的函数
        function initDockerfileEditorManually(content) {
            console.log('手动初始化 Dockerfile 编辑器，内容:', content);
            const dockerfileContainer = document.getElementById('dockerfile-editor');
            if (dockerfileContainer) {
                // 清空容器
                dockerfileContainer.innerHTML = '';
                
                // 创建一个文本区域作为备选方案
                const textarea = document.createElement('textarea');
                textarea.value = content || '# 未生成 Dockerfile';
                textarea.style.width = '100%';
                textarea.style.height = '400px';
                textarea.style.fontFamily = 'Monaco, Menlo, "Ubuntu Mono", monospace';
                textarea.style.fontSize = '14px';
                textarea.style.padding = '10px';
                textarea.style.border = '1px solid #D1D5DB';
                textarea.style.borderRadius = '0.375rem';
                textarea.style.backgroundColor = '#ffffff';
                textarea.style.resize = 'vertical';
                textarea.readOnly = true;
                
                dockerfileContainer.appendChild(textarea);
            } else {
                console.error('Dockerfile editor container not found');
            }
            
        }

        // 实现手动调整大小功能
        function makeResizable() {
            const resizableContainer = document.querySelector('.resizable-container');
            const resizeHandle = document.querySelector('.resize-handle');
            
            if (!resizableContainer || !resizeHandle) return;
            
            let isResizing = false;
            
            resizeHandle.addEventListener('mousedown', function(e) {
                isResizing = true;
                document.body.style.cursor = 'ns-resize';
                e.preventDefault();
            });
            
            document.addEventListener('mousemove', function(e) {
                if (!isResizing) return;
                
                const containerRect = resizableContainer.getBoundingClientRect();
                const newHeight = e.clientY - containerRect.top;
                
                // 确保最小高度和最大高度限制
                if (newHeight >= 200 && newHeight <= window.innerHeight * 0.75) {
                    resizableContainer.style.height = newHeight + 'px';
                }
            });
            
            document.addEventListener('mouseup', function() {
                isResizing = false;
                document.body.style.cursor = 'default';
            });
        }
        
        // 在页面加载完成后初始化调整大小功能
        document.addEventListener('DOMContentLoaded', function() {
            makeResizable();
            
            console.log('DOM 加载完成，检查 Monaco 容器...');
            
            // Check if containers exist and have proper dimensions
            const dockerfileContainer = document.getElementById('dockerfile-editor');
            const composeContainer = document.getElementById('compose-editor');
            
            if (dockerfileContainer) {
                console.log('Dockerfile 容器已找到:', dockerfileContainer.offsetWidth, 'x', dockerfileContainer.offsetHeight);
            }
            if (composeContainer) {
                console.log('Compose 容器已找到:', composeContainer.offsetWidth, 'x', composeContainer.offsetHeight);
            }
            
            // Set model selector to user's cached preference
            setModelFromCache();
            
            // For non-streaming results, initialize editors immediately
            {% if result and not streaming %}
            initializeEditors();
            {% elif streaming %}
            // For streaming, connect WebSocket
            connectWebSocket();
            {% endif %}
        });

        // Handle window resize for Monaco editors
        window.addEventListener('resize', () => {
            if (dockerfileEditor) dockerfileEditor.layout();
            if (composeEditor) composeEditor.layout();
        });
        
        {% endif %}
    </script>
</body>
</html>