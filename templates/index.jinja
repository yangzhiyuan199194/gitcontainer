<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>启智自动化构建 - GitHub/HuggingFace/ModelScope</title>
    
    <!-- Favicon links -->
    <link rel="icon" type="image/png" sizes="16x16" href="/static/icons8-docker-doodle-16.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/static/icons8-docker-doodle-32.png">
    <link rel="apple-touch-icon" href="/static/icons8-docker-doodle-120.png">
    <link rel="shortcut icon" href="/static/icons8-docker-doodle-32.png">
    
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.min.js"></script>
    <style>
        .loader {
            border: 4px solid #E6F2FF;
            border-top: 4px solid #4A90E2;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .monaco-container {
            height: 400px;
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
            position: relative;
            overflow: hidden;
            background: #ffffff;
        }
        .monaco-container > div {
            width: 100%;
            height: 100%;
        }
        .monaco-container-compose {
            height: 250px;
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
            position: relative;
            overflow: hidden;
            background: #ffffff;
        }
        .monaco-container-compose > div {
            width: 100%;
            height: 100%;
        }
        .step-active {
            border-color: #4A90E2;
            background-color: #EFF6FF;
        }
        .step-completed {
            border-color: #10B981;
            background-color: #F0FDF4;
        }
        .step-failed {
            border-color: #EF4444;
            background-color: #FEF2F2;
        }
        .step-inactive {
            border-color: #E5E7EB;
            background-color: #FFFFFF;
        }
        .card {
            background: #FFFFFF;
            border: 1px solid #E5E7EB;
            border-radius: 0.5rem;
            box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        }
        .btn-primary {
            background-color: #4A90E2;
            color: white;
            border: 1px solid #4A90E2;
            border-radius: 0.375rem;
            font-weight: 500;
            transition: all 0.2s;
        }
        .btn-primary:hover {
            background-color: #3A7BC8;
            border-color: #3A7BC8;
        }
        .btn-secondary {
            background-color: #6B7280;
            color: white;
            border: 1px solid #6B7280;
            border-radius: 0.375rem;
            font-weight: 500;
            transition: all 0.2s;
        }
        .btn-secondary:hover {
            background-color: #4B5563;
            border-color: #4B5563;
        }
        .form-input {
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
            padding: 0.75rem 1rem;
        }
        .form-input:focus {
            outline: none;
            border-color: #4A90E2;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }
        .main-container {
            width: 80%;
        }
        /* Model selector styles */
        .model-selector {
            position: relative;
            display: inline-block;
        }
        .model-selector select {
            appearance: none;
            background-color: #fff;
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
            padding: 0.5rem 2.5rem 0.5rem 1rem;
            font-size: 0.875rem;
            line-height: 1.25rem;
            color: #374151;
            cursor: pointer;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }
        .model-selector select:focus {
            outline: none;
            border-color: #4A90E2;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }
        .model-selector label {
            position: absolute;
            top: -0.5rem;
            left: 0.75rem;
            background-color: #fff;
            padding: 0 0.25rem;
            font-size: 0.75rem;
            color: #4A90E2;
            font-weight: 500;
        }
        /* 工作流节点样式 */
        .workflow-step {
            transition: all 0.3s ease;
            position: relative;
        }
        
        /* 节点连接线 */
        .workflow-step:not(:last-child)::after {
            content: '→';
            position: absolute;
            right: -1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #d1d5db;
            font-size: 1rem;
            z-index: 10;
            background-color: transparent;
        }
        
        /* 响应式处理 */
        @media (max-width: 768px) {
            .workflow-step:not(:last-child)::after {
                right: 0.5rem;
                top: 100%;
                transform: translateX(50%);
            }
        }
        
        /* 节点状态样式 */
        .step-waiting {
            background-color: #f9fafb;
            border-color: #d1d5db;
        }
        
        .step-active {
            background-color: #dbeafe;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        
        .step-active .step-number {
            background-color: #3b82f6 !important;
            color: white !important;
        }
        
        .step-completed {
            background-color: #dcfce7;
            border-color: #10b981;
        }
        
        .step-completed .step-number {
            background-color: #10b981 !important;
            color: white !important;
        }
        
        .step-failed {
            background-color: #fee2e2;
            border-color: #ef4444;
        }
        
        .step-failed .step-number {
            background-color: #ef4444 !important;
            color: white !important;
        }
        
        /* 加载动画 */
        .loader {
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3b82f6;
            border-radius: 50%;
            width: 1rem;
            height: 1rem;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* 内容显示区域样式，支持HTML内容 */
        #content-display {
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.875rem; /* 14px */
            line-height: 1.25rem; /* 20px */
            white-space: pre-wrap;
            word-break: break-word;
            height: 32rem; /* 增大高度到 h-[512px] (32rem) */
            min-height: 24rem; /* 最小高度保持 h-96 */
            max-height: 75vh; /* 最大高度不超过视口的75% */
            overflow-y: auto;
            background-color: #000000;
            color: #00FF00; /* 默认绿色文本 */
            resize: vertical; /* 允许垂直调整大小 */
            padding: 1rem; /* 添加内边距，解决顶边问题 */
            margin: 0;
        }
        
        /* 可调整大小的容器 */
        .resizable-container {
            resize: vertical;
            overflow: hidden;
            min-height: 24rem;
            max-height: 75vh;
            position: relative;
        }
        
        /* 调整大小的手柄 */
        .resize-handle {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 10px;
            background: linear-gradient(to bottom, #E5E7EB 0%, #E5E7EB 20%, transparent 20%);
            cursor: ns-resize;
            border-bottom: 1px solid #E5E7EB;
        }
        
        /* 内容显示区域在可调整容器中 */
        #content-display {
            height: calc(100% - 10px); /* 减去手柄的高度 */
            overflow-y: auto;
        }
        
        /* Build history item */
        .build-item {
            transition: all 0.2s;
        }
        .build-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        
        /* Tab styles */
        .tab-container {
            border-bottom: 1px solid #E5E7EB;
            margin-bottom: 2rem;
        }
        
        .tab-button {
            padding: 0.75rem 1.5rem;
            background-color: #F3F4F6;
            border: 1px solid #E5E7EB;
            border-bottom: none;
            cursor: pointer;
            border-radius: 0.5rem 0.5rem 0 0;
            font-weight: 500;
            color: #4B5563;
            transition: all 0.2s;
        }
        
        .tab-button.active {
            background-color: #FFFFFF;
            color: #4A90E2;
            border-bottom: 2px solid #FFFFFF;
            margin-bottom: -1px;
        }
        
        .tab-button:not(.active):hover {
            background-color: #E5E7EB;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /* Add a class to hide content until we determine which tab to show */
        .tab-content.initial {
            display: none;
        }
        
        .coming-soon {
            text-align: center;
            padding: 3rem;
            color: #6B7280;
        }
        
        .coming-soon h3 {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .coming-soon p {
            font-size: 0.875rem;
        }
        
        /* 确保页脚始终在底部 */
        .page-wrapper {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        .content-wrapper {
            flex: 1;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="page-wrapper">
        <!-- Header -->
        <header class="border-b border-gray-200 bg-white">
            <div class="main-container mx-auto px-4 py-4 flex justify-between items-center">
                <h1 class="text-2xl font-bold">
                    <a href="/" class="hover:opacity-80 transition-opacity">
                        <span class="text-gray-900">启智</span><span class="text-[#4A90E2]">自动化构建</span>
                    </a>
                </h1>
                {% if available_models and available_models|length > 1 %}
                <div class="model-selector">
                    <label for="model-select">AI 模型</label>
                    <select id="model-select" name="model" class="model-select" onchange="updateModel(this.value)">
                        {% for model in available_models %}
                        <option value="{{ model }}" {% if model == current_model %}selected{% endif %}>{{ model }}</option>
                        {% endfor %}
                    </select>
                </div>
                {% endif %}
            </div>
        </header>

        <!-- Main Content -->
        <main class="main-container mx-auto px-4 py-8 content-wrapper">
            <!-- Tab Navigation -->
            <div class="tab-container">
                <div class="flex border-b border-gray-200">
                    <button class="tab-button active" onclick="switchTab('github')">GitHub</button>
                    <button class="tab-button" onclick="switchTab('huggingface')">HuggingFace</button>
                    <button class="tab-button" onclick="switchTab('modelscope')">ModelScope</button>
                </div>
            </div>
            
            <!-- GitHub Tab Content -->
            <div id="github" class="tab-content initial active">
                <!-- Hero Section -->
                <div class="mb-10 text-center">
                    <p class="text-gray-600 text-lg max-w-2xl mx-auto">
                        粘贴任何 GitHub 仓库 URL，获取由AI为您量身定制的智能服务
                    </p>
                </div>

                <!-- Error Message -->
                {% if error %}
                <div class="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700">
                    {{ error }}
                </div>
                {% endif %}

                <!-- Pre-filled URL notification -->
                {% if pre_filled %}
                <div class="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg text-green-700">
                    <div class="flex items-center gap-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <span class="font-medium">太好了！我们已从 URL 自动检测到您的 GitHub 仓库。</span>
                    </div>
                    <p class="text-sm mt-1">您现在可以为此仓库生成 Dockerfile，或根据需要修改 URL。</p>
                </div>
                {% endif %}

                <!-- Input Form -->
                <div class="mb-8">
                    <div class="card p-6">
                        <form method="post" class="flex flex-col md:flex-row gap-4" onsubmit="prepareFormSubmit(event)">
                            <div class="flex-1">
                                <input 
                                    type="url" 
                                    name="repo_url" 
                                    id="repo_url"
                                    value="{{ repo_url }}"
                                    placeholder="https://github.com/用户名/仓库名"
                                    required
                                    class="form-input w-full text-base"
                                >
                            </div>
                            <div class="md:w-auto flex flex-col gap-2">
                                <button 
                                    type="submit"
                                    class="btn-primary py-3 px-6 text-base w-full"
                                >
                                    自动化构建
                                </button>
                                <div class="flex items-center justify-center">
                                    <input type="checkbox" 
                                           id="generate_wiki"
                                           name="generate_wiki"
                                           class="w-4 h-4 text-[#4A90E2] bg-gray-100 border-gray-300 rounded focus:ring-[#4A90E2] focus:ring-2"
                                           checked
                                    >
                                    <label for="generate_wiki" class="ml-2 text-sm text-gray-700">生成Wiki</label>
                                </div>
                            </div>
                            <input type="hidden" name="additional_instructions_hidden" id="additional_instructions_hidden" value="">
                            <input type="hidden" name="model" id="model_hidden" value="{{ current_model }}">
<script>
    // 页面加载时恢复缓存的状态
    document.addEventListener('DOMContentLoaded', function() {
        const generateWikiCheckbox = document.getElementById('generate_wiki');
        const cachedState = localStorage.getItem('generateWikiState');
        
        if (cachedState !== null) {
            generateWikiCheckbox.checked = cachedState === 'true';
        }
        
        // 监听复选框状态变化并缓存
        generateWikiCheckbox.addEventListener('change', function() {
            localStorage.setItem('generateWikiState', this.checked.toString());
        });
    });
</script>
                        </form>
                        
                        <!-- Examples and Additional instructions row -->
                        <div class="mt-6 flex flex-col md:flex-row md:justify-between md:items-start gap-4">
                            <!-- Additional instructions checkbox -->
                            <div class="flex-shrink-0 self-start md:self-center">
                                <div class="flex items-center">
                                    <input type="checkbox" 
                                           id="show_instructions" 
                                           onchange="toggleInstructions()"
                                           class="w-4 h-4 text-[#4A90E2] bg-gray-100 border-gray-300 rounded focus:ring-[#4A90E2] focus:ring-2">
                                    <label for="show_instructions" class="ml-2 text-gray-700">附加说明</label>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Additional instructions textarea (spans full width) -->
                        <div id="instructions_container" class="hidden mt-4">
                            <textarea 
                                id="additional_instructions"
                                name="additional_instructions"
                                placeholder="例如，使用 Alpine Linux，包含特定工具，针对生产环境优化等"
                                rows="3"
                                class="form-input w-full text-sm"
                            ></textarea>
                        </div>
                    </div>
                </div>
                
                <!-- Successful Builds Section - Moved back inside GitHub tab -->
                {% if successful_builds and successful_builds|length > 0 %}
                <div class="mb-8">
                    <div class="card p-6">
                        <h2 class="text-xl font-bold text-gray-900 mb-4">已构建成功的项目</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            {% for build in successful_builds %}
                            <a href="/builds/{{ build.repo_url | replace('https://github.com/', '') | replace('/', '_') }}" 
                               class="build-item block border border-gray-200 rounded-lg p-4 hover:border-blue-300">
                                <div class="flex justify-between items-start">
                                    <div>
                                        <h3 class="font-medium text-gray-900 truncate">{{ build.result.project_name or build.result.repo_info.name if build.result.repo_info else 'Unknown Project' }}</h3>
                                        <p class="text-sm text-gray-500 truncate mt-1">{{ build.repo_url }}</p>
                                    </div>
                                    <span class="inline-flex items-center text-xs text-green-600 bg-green-50 px-2 py-1 rounded-full">
                                        <span class="w-1.5 h-1.5 rounded-full bg-green-500 mr-1"></span>
                                        成功
                                    </span>
                                </div>
                                <div class="mt-3 text-xs text-gray-500">
                                    <div>{{ build.result.technology_stack or 'Unknown Stack' }}</div>
                                    <div class="mt-2">{{ build.build_time[:19].replace('T', ' ') }}</div>
                                </div>
                            </a>
                            {% endfor %}
                        </div>
                    </div>
                </div>
                {% endif %}
            </div>
            
            <!-- HuggingFace Tab Content -->
            <div id="huggingface" class="tab-content initial">
                <div class="mb-10 text-center">
                    <p class="text-gray-600 text-lg max-w-2xl mx-auto">
                        粘贴任何 HuggingFace 模型 URL，获取由AI为您量身定制的智能服务
                    </p>
                </div>
                
                <div class="coming-soon card p-8">
                    <h3>即将推出</h3>
                    <p>HuggingFace 模型自动化构建功能正在开发中</p>
                </div>
            </div>
            
            <!-- ModelScope Tab Content -->
            <div id="modelscope" class="tab-content initial">
                <div class="mb-10 text-center">
                    <p class="text-gray-600 text-lg max-w-2xl mx-auto">
                        粘贴任何 ModelScope 模型 URL，获取由AI为您量身定制的智能服务
                    </p>
                </div>
                
                <div class="coming-soon card p-8">
                    <h3>即将推出</h3>
                    <p>ModelScope 模型自动化构建功能正在开发中</p>
                </div>
            </div>
        </main>

        <!-- Loading State -->
        {% if loading %}
        <div class="card p-8">
            <div class="flex flex-col items-center space-y-4">
                <div class="loader"></div>
                <p class="text-lg font-medium text-gray-900">正在分析仓库并生成 Dockerfile...</p>
                <p class="text-sm text-gray-600">这可能需要一些时间</p>
            </div>
        </div>
        {% endif %}

        <!-- Streaming State -->
        {% if streaming %}
        <div id="streaming-container" class="main-container mx-auto px-4 py-8">
            <div class="card p-6">
                
                <!-- Status Display -->
                <div class="text-center mb-6">
                    <div class="loader mx-auto mb-4"></div>
                    <h2 class="text-xl font-bold text-gray-900 mb-2">正在自动化构建</h2>
                    <p id="status-message" class="text-gray-600">连接中...</p>
                </div>

                <!-- Progress Steps -->
                <div id="workflow-nodes" class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6 min-h-[100px] bg-gray-50 p-4 border border-gray-200 rounded-lg">
                    <!-- 工作流节点将通过JavaScript动态生成 -->
                    <div class="flex items-center justify-center col-span-full">
                        <div class="loader w-5 h-5 mr-2"></div>
                        <span class="text-gray-600">加载工作流节点...</span>
                    </div>
                </div>
                    
                    <!-- Content Display Area -->
                    <div id="content-display-area" class="mt-6">
                        <div class="border border-gray-200 rounded-lg overflow-hidden bg-black resizable-container">
                            <div id="content-display" class="font-mono text-green-400 text-sm whitespace-pre-wrap break-words"></div>
                            <div class="resize-handle"></div>
                        </div>
                    </div>

                </div>
            </div>

            <!-- Results Container (hidden initially) -->
            <div id="results-container" class="hidden">
                <div class="card p-6 space-y-6">
                    <!-- Results content will be populated by JavaScript -->
                </div>
            </div>
        </div>
        {% endif %}

        <!-- Footer -->
        <footer class="border-t border-gray-200 bg-white">
            <div class="main-container mx-auto px-4 py-4 text-center">
                <p class="text-gray-600 text-sm">
                    &copy; 2025 启智自动化构建. 保留所有权利.
                </p>
            </div>
        </footer>

        <!-- Results (for non-streaming requests) -->
        {% if result %}
        <div class="main-container mx-auto px-4 py-8">
            <div class="card p-6 space-y-6">
                
                <!-- Project Info -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div class="border border-gray-200 rounded p-4">
                        <h3 class="font-medium text-gray-900 mb-1">项目</h3>
                        <p class="text-sm text-gray-600">{{ result.project_name }}</p>
                    </div>
                    <div class="border border-gray-200 rounded p-4">
                        <h3 class="font-medium text-gray-900 mb-1">技术栈</h3>
                        <p class="text-sm text-gray-600">{{ result.technology_stack }}</p>
                    </div>
                    <div class="border border-gray-200 rounded p-4">
                        <h3 class="font-medium text-gray-900 mb-1">仓库大小</h3>
                        <p class="text-sm text-gray-600">{{ result.repo_info.file_count }} 个文件 ({{ result.repo_info.size_mb }} MB)</p>
                    </div>
                </div>

                <!-- Dockerfile -->
                <div>
                    <div class="flex justify-between items-center mb-3">
                        <h3 class="text-lg font-medium text-gray-900">Dockerfile</h3>
                        <div class="flex space-x-2">
                            <button 
                                onclick="copyDockerfile()"
                                class="btn-primary px-4 py-2 flex items-center gap-2 text-sm"
                            >
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                                </svg>
                                复制 Dockerfile
                            </button>
                            <a href="/" class="btn-secondary px-4 py-2 text-sm">
                                返回首页
                            </a>
                        </div>
                    </div>
                    <div class="border border-gray-200 rounded">
                        <div class="monaco-container">
                            <div id="dockerfile-editor"></div>
                        </div>
                    </div>
                </div>

                <!-- Docker Compose (if available) -->
                {% if result.docker_compose %}
                <div>
                    <div class="flex justify-between items-center mb-3">
                        <h3 class="text-lg font-medium text-gray-900">docker-compose.yml</h3>
                        <button 
                            onclick="copyCompose()"
                            class="btn-primary px-4 py-2 flex items-center gap-2 text-sm"
                        >
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                            </svg>
                            复制 Compose
                        </button>
                    </div>
                    <div class="border border-gray-200 rounded">
                        <div class="monaco-container-compose">
                            <div id="compose-editor"></div>
                        </div>
                    </div>
                </div>
                {% endif %}

                <!-- Reasoning & Notes -->
                {% if result.reasoning or result.additional_notes %}
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {% if result.reasoning %}
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">基础镜像选择理由</h3>
                        <div class="border border-gray-200 rounded p-4">
                            <p class="text-sm text-gray-600">{{ result.reasoning }}</p>
                        </div>
                    </div>
                    {% endif %}
                    
                    {% if result.additional_notes %}
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">附加说明</h3>
                        <div class="border border-gray-200 rounded p-4">
                            <p class="text-sm text-gray-600 whitespace-pre-wrap">{{ result.additional_notes }}</p>
                        </div>
                    </div>
                    {% endif %}
                </div>
                {% endif %}
                
                <!-- Docker Image Build Info -->
                {% if result.image_build %}
                <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Docker 镜像构建</h3>
                    <div class="border border-gray-200 rounded p-4">
                    {% if result.image_build.success %}
                        <div class="bg-green-50 border border-green-200 rounded p-3 mb-3">
                            <p class="text-green-700 font-medium">{{ result.image_build.message }}</p>
                        </div>
                        <div class="mt-3">
                            <h4 class="font-medium text-gray-700 mb-2">镜像标签:</h4>
                            <div class="bg-gray-50 p-3 rounded font-mono text-sm break-words">
                                {{ result.image_build.image_tag }}
                            </div>
                            <p class="mt-2 text-sm text-gray-600">您可以使用以下命令运行此镜像:</p>
                            <div class="mt-1 bg-gray-800 text-green-400 p-3 rounded font-mono text-sm">
                                docker run -p 8000:8000 {{ result.image_build.image_tag }}
                            </div>
                        </div>
                    {% else %}
                        <div class="bg-red-50 border border-red-200 rounded p-3">
                            <p class="text-red-700 font-medium">构建失败: {{ result.image_build.error }}</p>
                        </div>
                        
                        {% if result.image_build.build_log %}
                        <div class="mt-3">
                            <h4 class="font-medium text-gray-700 mb-2">构建日志:</h4>
                            <div class="bg-gray-800 text-red-400 p-3 rounded font-mono text-xs overflow-auto max-h-40">
                                {{ result.image_build.build_log }}
                            </div>
                        </div>
                        {% endif %}
                        
                        <div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded">
                            <p class="text-blue-700 text-sm">
                                <strong>提示:</strong> 构建失败可能是由于网络问题或Docker Hub镜像拉取问题导致的。
                                您可以手动复制Dockerfile内容并使用以下命令构建:
                            </p>
                            <div class="mt-2 bg-gray-800 text-yellow-400 p-2 rounded font-mono text-xs">
                                docker build --no-cache -t your-image-name .
                            </div>
                        </div>
                    {% endif %}
                    </div>
                </div>
                {% endif %}

            </div>
        </div>
        {% endif %}
    </div>

    <script>
        // Tab switching function
        function switchTab(tabName) {
            // Hide all tab content
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => {
                content.classList.remove('active');
                content.classList.add('initial');
            });
            
            // Remove active class from all tab buttons
            const tabButtons = document.querySelectorAll('.tab-button');
            tabButtons.forEach(button => {
                button.classList.remove('active');
            });
            
            // Show selected tab content
            const activeTab = document.getElementById(tabName);
            if (activeTab) {
                activeTab.classList.remove('initial');
                activeTab.classList.add('active');
            }
            
            // Add active class to clicked button
            event.target.classList.add('active');
            
            // Save the selected tab to localStorage
            localStorage.setItem('selectedTab', tabName);
        }
        
        // Function to restore the selected tab on page load
        function restoreSelectedTab() {
            // Check if there's a selected tab in localStorage
            const selectedTab = localStorage.getItem('selectedTab');
            if (selectedTab) {
                // Find the tab button and click it
                const tabButton = Array.from(document.querySelectorAll('.tab-button')).find(button => 
                    button.textContent.toLowerCase().includes(selectedTab.toLowerCase())
                );
                if (tabButton) {
                    // Remove initial class from all tabs first
                    document.querySelectorAll('.tab-content').forEach(content => {
                        content.classList.add('initial');
                    });
                    
                    // Simulate click to switch to the selected tab
                    tabButton.click();
                    return;
                }
            }
            
            // If no selected tab or tab not found, show GitHub tab by default
            const githubTab = document.getElementById('github');
            const githubTabButton = Array.from(document.querySelectorAll('.tab-button')).find(button => 
                button.textContent.includes('GitHub')
            );
            
            if (githubTab && githubTabButton) {
                // Remove initial class from all tabs first
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.add('initial');
                });
                
                githubTab.classList.remove('initial');
                githubTab.classList.add('active');
                githubTabButton.classList.add('active');
            }
        }
        
        // Call restoreSelectedTab when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            restoreSelectedTab();
            // Set model selector to user's cached preference
            setModelFromCache();
        });
        
        // Example submission function
        function submitExample(repoUrl) {
            const input = document.getElementById('repo_url');
            input.value = repoUrl;
            input.focus();
            // Optionally auto-submit the form
            // input.form.submit();
        }

        // Toggle additional instructions visibility
        function toggleInstructions() {
            const checkbox = document.getElementById('show_instructions');
            const container = document.getElementById('instructions_container');
            
            if (checkbox.checked) {
                container.classList.remove('hidden');
                container.classList.add('block');
            } else {
                container.classList.add('hidden');
                container.classList.remove('block');
                // Clear the textarea when hiding
                document.getElementById('additional_instructions').value = '';
            }
        }

        // Set the model selector to the user's previously selected model
        function setModelFromCache() {
            // First check if there's a model parameter in the URL
            const urlParams = new URLSearchParams(window.location.search);
            const urlModel = urlParams.get('model');
            
            if (urlModel) {
                const modelSelector = document.getElementById('model-select');
                if (modelSelector) {
                    // Check if the URL model is in the available options
                    const options = Array.from(modelSelector.options);
                    const modelExists = options.some(option => option.value === urlModel);
                    
                    if (modelExists) {
                        modelSelector.value = urlModel;
                        // Also update the hidden field
                        document.getElementById('model_hidden').value = urlModel;
                        // Save to localStorage as well
                        localStorage.setItem('selectedModel', urlModel);
                        return;
                    }
                }
            }
            
            // If no URL model, check localStorage
            const savedModel = localStorage.getItem('selectedModel');
            if (savedModel) {
                const modelSelector = document.getElementById('model-select');
                if (modelSelector) {
                    // Check if the saved model is in the available options
                    const options = Array.from(modelSelector.options);
                    const modelExists = options.some(option => option.value === savedModel);
                    
                    if (modelExists) {
                        modelSelector.value = savedModel;
                        // Also update the hidden field
                        document.getElementById('model_hidden').value = savedModel;
                    }
                }
            }
        }

        // Update model hidden field when model is changed
        function updateModel(model) {
            document.getElementById('model_hidden').value = model;
            // Save user's model preference to localStorage
            localStorage.setItem('selectedModel', model);
            // Update URL parameter
            const url = new URL(window.location);
            url.searchParams.set('model', model);
            window.history.replaceState({}, '', url);
        }

        // Prepare form submission by copying additional instructions to hidden input
        function prepareFormSubmit(event) {
            const checkbox = document.getElementById('show_instructions');
            const instructionsTextarea = document.getElementById('additional_instructions');
            const hiddenInput = document.getElementById('additional_instructions_hidden');
            
            if (checkbox.checked && instructionsTextarea.value.trim()) {
                hiddenInput.value = instructionsTextarea.value.trim();
            } else {
                hiddenInput.value = '';
            }
            
            // Allow form to submit normally
            return true;
        }

        // Monaco Editor setup
        let dockerfileEditor = null;
        let composeEditor = null;

        // Configure Monaco Editor loader
        require.config({ 
            paths: { 
                'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' 
            } 
        });

        // Initialize Monaco Editors when available
        function initializeEditors() {
            console.log('正在尝试初始化 Monaco 编辑器...');
            require(['vs/editor/editor.main'], function() {
                console.log('Monaco 编辑器加载成功');
            }, function(error) {
                console.error('加载 Monaco 编辑器失败:', error);
            });
        }

        function createMonacoEditor(elementId, content, language) {
            console.log('正在为:', elementId, '创建 Monaco 编辑器，语言:', language);
            const element = document.getElementById(elementId);
            if (!element) {
                console.error('未找到元素:', elementId);
                return null;
            }
            
            return null;
        }

        // Copy functions for shell-style display boxes
        function copyDockerfile() {
            let content = '';
            
            // 从shell风格展示框获取内容
            const dockerfileDisplay = document.getElementById('dockerfile-display');
            if (dockerfileDisplay) {
                content = dockerfileDisplay.textContent || dockerfileDisplay.innerText || '';
            }
            
            if (content) {
                const button = event.target.closest('button');
                copyToClipboard(content, 'Dockerfile 已复制！', button);
            } else {
                console.warn('No Dockerfile content to copy');
            }
        }

        function copyCompose() {
            let content = '';
            
            // 从shell风格展示框获取内容
            const composeDisplay = document.getElementById('compose-display');
            if (composeDisplay) {
                content = composeDisplay.textContent || composeDisplay.innerText || '';
            }
            
            if (content) {
                const button = event.target.closest('button');
                copyToClipboard(content, 'Compose 文件已复制！', button);
            } else {
                console.warn('No compose content to copy');
            }
        }
        
        // 通用复制到剪贴板函数
        function copyToClipboard(text, message, button) {
            if (!text) {
                console.warn('No text to copy');
                return;
            }
            
            // 创建临时textarea元素
            const textarea = document.createElement('textarea');
            textarea.value = text;
            document.body.appendChild(textarea);
            textarea.select();
            
            try {
                // 执行复制
                const successful = document.execCommand('copy');
                if (successful) {
                    // 显示成功消息
                    if (button) {
                        const originalText = button.innerHTML;
                        button.innerHTML = message;
                        setTimeout(() => {
                            button.innerHTML = originalText;
                        }, 2000);
                    }
                    console.log('Copying to clipboard was successful!');
                } else {
                    console.error('Copying to clipboard failed!');
                }
            } catch (err) {
                console.error('Failed to copy: ', err);
            }
            
            // 移除临时元素
            document.body.removeChild(textarea);
        }

        // WebSocket streaming functionality
        {% if streaming %}
        const session_id = "{{ session_id }}";
        let socket;
        let currentStep = null;
        let workflowNodes = {}; // 存储工作流节点信息
        let workflowNodeOrder = []; // 存储节点顺序
        
        // 统一的节点ID映射表，确保清晰的映射关系
        const nodeMappings = {
            'clone_repository': 'clone',
            'analyze_repository': 'analyze',
            'generate_dockerfile': 'generate',
            'build_docker': 'build',
            'test_env': 'test',
            'reflect_on_failure': 'reflect',
            'improve_dockerfile': 'improve',
            'generate_wiki': 'wiki'
        };
        
        // 反向映射，用于快速查找
        const reverseNodeMappings = {};
        Object.entries(nodeMappings).forEach(([key, value]) => {
            reverseNodeMappings[value] = key;
        });
        
        // 步骤状态样式
        const stepStatusClasses = {
            active: 'step-active',
            completed: 'step-completed', 
            failed: 'step-failed',
            waiting: 'step-waiting'
        };
        
        function connectWebSocket() {
            if (!session_id) {
                console.log('No session ID provided, skipping WebSocket connection');
                return;
            }
            
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const ws_url = protocol + '//' + window.location.host + '/ws/' + session_id;
            console.log('Connecting to WebSocket:', ws_url);
            
            socket = new WebSocket(ws_url);
            
            socket.onopen = function(event) {
                console.log('WebSocket connected');
                showStatus('已连接到服务器...');
                
                // 确保工作流节点容器存在且可见
                const nodesContainer = document.getElementById('workflow-nodes');
                if (nodesContainer) {
                    nodesContainer.style.display = 'grid';
                    console.log('Workflow nodes container is ready and visible');
                } else {
                    console.error('Workflow nodes container still not found after WebSocket connection');
                }
            };
            
            socket.onmessage = function(event) {
                console.log('Raw WebSocket message received:', event.data);
                try {
                    const data = JSON.parse(event.data);
                    console.log('Parsed message data:', data);
                    
                    // 检查消息类型是否为字符串
                    const messageType = String(data.type);
                    console.log('Message type (string):', messageType);
                    
                    switch(messageType) {
                        case 'WORKFLOW_METADATA':
                        case 'workflow_metadata': // 处理小写版本，以防类型不一致
                            console.log('Processing WORKFLOW_METADATA message');
                            handleWorkflowMetadata(data);
                            break;
                    case 'NODE_START':
                    case 'node_start': // 处理小写版本
                        handleNodeStart(data);
                        break;
                    case 'NODE_UPDATE':
                    case 'node_update': // 处理小写版本
                        handleNodeUpdate(data);
                        break;
                    case 'NODE_COMPLETE':
                    case 'node_complete': // 处理小写版本
                        handleNodeComplete(data);
                        break;
                    case 'status':
                        showStatus(data.content);
                        // 增强status消息处理，提供更准确的节点状态更新
                        console.log('Processing status message:', data.content);
                        
                        // 基于状态内容识别并更新正确的节点
                        if (data.content.includes('克隆仓库') || data.content.includes('Cloning repository')) {
                            // 确保克隆仓库状态正确更新为active
                            const cloneElement = document.getElementById('step-clone');
                            if (cloneElement) {
                                console.log('Updating clone step to active from status message');
                                updateStepStatus('clone', 'active');
                                // 只有当前步骤不是clone时才更新currentStep和显示分隔符
                                if (currentStep !== 'clone') {
                                    currentStep = 'clone';
                                    // 添加带步骤说明的分隔符
                                    showStepContent('content', '\n[克隆仓库阶段开始]\n' + '='.repeat(50) + '\n');
                                }
                            }
                        } else if (data.content.includes('Successfully cloned') || data.content.includes('✅ Successfully cloned')) {
                            // 确保克隆仓库完成状态正确更新为completed
                            const cloneElement = document.getElementById('step-clone');
                            if (cloneElement) {
                                console.log('Updating clone step to completed from status message');
                                updateStepStatus('clone', 'completed');
                                // 克隆成功后，更新currentStep为null，等待下一个节点
                                if (currentStep === 'clone') {
                                    currentStep = null;
                                }
                            }
                        } else if (data.content.includes('分析') || data.content.includes('Analyzing')) {
                            // 更新分析仓库节点状态
                            const analyzeElement = document.getElementById('step-analyze');
                            if (analyzeElement) {
                                console.log('Updating analyze step to active from status message');
                                updateStepStatus('analyze', 'active');
                                if (currentStep !== 'analyze') {
                                    currentStep = 'analyze';
                                    showStepContent('content', '\n[分析仓库阶段开始]\n' + '='.repeat(50) + '\n');
                                }
                            }
                        } else if (data.content.includes('生成Dockerfile') || data.content.includes('Generating Dockerfile')) {
                            // 更新生成Dockerfile节点状态
                            const generateElement = document.getElementById('step-generate');
                            if (generateElement) {
                                console.log('Updating generate step to active from status message');
                                updateStepStatus('generate', 'active');
                                if (currentStep !== 'generate') {
                                    currentStep = 'generate';
                                    showStepContent('content', '\n[生成Dockerfile阶段开始]\n' + '='.repeat(50) + '\n');
                                }
                            }
                        } else if (data.content.includes('构建镜像') || data.content.includes('Building Docker')) {
                            // 更新构建镜像节点状态
                            const buildElement = document.getElementById('step-build');
                            if (buildElement) {
                                console.log('Updating build step to active from status message');
                                updateStepStatus('build', 'active');
                                if (currentStep !== 'build') {
                                    currentStep = 'build';
                                    showStepContent('content', '\n[构建镜像阶段开始]\n' + '='.repeat(50) + '\n');
                                }
                            }
                        }
                        break;
                    case 'chunk':
                        // 将所有chunk消息显示到独立的内容显示区域，不添加步骤前缀
                        showStepContent('content', data.content);
                        break;
                    case 'stream_start':
                        showStatus('开始生成...');
                        break;
                    case 'build_log':
                        // 将构建日志显示到独立的内容显示区域，不添加步骤前缀
                        showStepContent('content', data.content);
                        break;
                    case 'phase_start':
                        // 处理阶段开始消息，根据phase_type应用不同颜色
                        let startContent = data.content;
                        if (data.phase_type === 'smart') {
                            startContent = '<span style="color: #FFFF00; font-weight: bold;">[智能阶段] ' + data.content + '</span>';
                        } else {
                            startContent = '<span style="color: #00FFFF; font-weight: bold;">[常规阶段] ' + data.content + '</span>';
                        }
                        showStepContent('content', startContent + '\n' + '='.repeat(50) + '\n');
                        break;
                    case 'phase_end':
                        // 处理阶段结束消息，根据phase_type应用不同颜色
                        let endContent = data.content;
                        if (data.phase_type === 'smart') {
                            endContent = '<span style="color: #FFFF00; font-weight: bold;">[智能阶段] ' + data.content + '</span>';
                        } else {
                            endContent = '<span style="color: #00FFFF; font-weight: bold;">[常规阶段] ' + data.content + '</span>';
                        }
                        showStepContent('content', endContent + '\n' + '='.repeat(50) + '\n');
                        break;
                    case 'error':
                        // 改进错误处理，避免错误状态错误传播
                        // 从错误内容中尝试识别错误所属的节点
                        let errorNode = currentStep;
                        
                        // 基于错误内容尝试识别正确的错误节点
                        if (data.content.includes('build') || data.content.includes('Docker') || data.content.includes('镜像')) {
                            errorNode = 'build';
                        } else if (data.content.includes('clone') || data.content.includes('Clone') || data.content.includes('克隆')) {
                            errorNode = 'clone';
                        } else if (data.content.includes('analyze') || data.content.includes('分析')) {
                            errorNode = 'analyze';
                        }
                        
                        // 只在能够确定错误节点时才更新状态，避免错误传播
                        if (errorNode) {
                            console.log(`Marking node ${errorNode} as failed due to error:`, data.content);
                            updateStepStatus(errorNode, 'failed');
                        }
                        
                        // Show error in content display area with HTML formatting
                        const nodeName = errorNode ? (workflowNodes[errorNode]?.name || errorNode) : '';
                        const errorPrefix = nodeName ? `${nodeName} ` : '';
                        const errorContent = `<span style="color: #FF0000; font-weight: bold;">❌ ${errorPrefix}错误: ${data.content}</span>`;
                        showStepContent('content', errorContent + '\n');
                        
                        // Also show error in status message
                        showError(data.content);
                        break;
                    case 'partial_complete':
                        console.log('Marking build step as failed but showing generated Dockerfile');
                        // 即使构建失败也要显示生成的Dockerfile
                        updateStepStatus('build', 'failed');
                        // 添加完成分隔符
                        showStepContent('content', '\n[任务完成 - 构建失败但已生成Dockerfile]\n' + '='.repeat(50) + '\n');
                                                
                        // 保持内容显示区域可见
                        const contentDisplayArea = document.getElementById('content-display-area');
                        if (contentDisplayArea) {
                            contentDisplayArea.style.display = 'block';
                        }
                                                
                        // 确保在DOM更新完成后显示结果
                        setTimeout(() => {
                            if (typeof showComplete === 'function') {
                                showComplete(data.result);
                            } else {
                                console.error('showComplete function not found');
                            }
                        }, 100);
                        break;
                    case 'complete':
                        console.log('Marking build step as completed');
                        // 检查result中的image_build是否成功
                        if (data.result && data.result.image_build && data.result.image_build.success) {
                            updateStepStatus('build', 'completed');
                            showStepContent('content', '\n[任务完成]\n' + '='.repeat(50) + '\n');
                        } else {
                            updateStepStatus('build', 'failed');
                            showStepContent('content', '\n[任务完成 - 构建失败但已生成Dockerfile]\n' + '='.repeat(50) + '\n');
                        }
                                                
                        // 保持内容显示区域可见
                        const contentDisplayAreaComplete = document.getElementById('content-display-area');
                        if (contentDisplayAreaComplete) {
                            contentDisplayAreaComplete.style.display = 'block';
                        }
                                                
                        // 确保在DOM更新完成后显示结果
                        setTimeout(() => {
                            if (typeof showComplete === 'function') {
                                showComplete(data.result);
                            } else {
                                console.error('showComplete function not found');
                            }
                        }, 100);
                        break;
                    default:
                        console.log('Unknown message type:', messageType);
                }
                } catch (error) {
                    console.error('Error parsing WebSocket message:', error);
                    console.error('Raw message that caused error:', event.data);
                }
            };
            
            socket.onclose = function(event) {
                console.log('WebSocket closed:', event);
                // Try to get final result if available
                if (event.wasClean) {
                    showStatus('连接已关闭');
                } else {
                    showError('连接意外断开');
                }
                
                // 确保内容显示区域保持可见
                const contentDisplayArea = document.getElementById('content-display-area');
                if (contentDisplayArea) {
                    contentDisplayArea.style.display = 'block';
                }
            };
            
            socket.onerror = function(error) {
                console.log('WebSocket error:', error);
                showError('连接错误: ' + error);
                
                // 确保内容显示区域保持可见
                const contentDisplayArea = document.getElementById('content-display-area');
                if (contentDisplayArea) {
                    contentDisplayArea.style.display = 'block';
                }
            };
        }
        
        function showStatus(message) {
            const statusMessage = document.getElementById('status-message');
            if (statusMessage) {
                statusMessage.textContent = message;
            }
        }
        
        // 页面加载时立即检查工作流节点容器
        document.addEventListener('DOMContentLoaded', function() {
            console.log('===== DOM CONTENT LOADED =====');
            const nodesContainer = document.getElementById('workflow-nodes');
            console.log('Workflow nodes container on DOM load:', nodesContainer);
            if (nodesContainer) {
                console.log('Container style:', nodesContainer.style);
                console.log('Container computed style display:', window.getComputedStyle(nodesContainer).display);
                console.log('Container computed style visibility:', window.getComputedStyle(nodesContainer).visibility);
                console.log('Container computed style opacity:', window.getComputedStyle(nodesContainer).opacity);
                console.log('Container innerHTML:', nodesContainer.innerHTML);
            }
        });
        
        // 手动测试函数 - 可以在浏览器控制台调用
        window.testWorkflowRendering = function() {
            console.log('===== MANUAL WORKFLOW RENDERING TEST =====');
            const testData = {
                "type": "WORKFLOW_METADATA",
                "nodes": [
                    {"id": "clone", "name": "克隆仓库", "label": "克隆仓库"},
                    {"id": "analyze", "name": "分析仓库", "label": "分析仓库"},
                    {"id": "generate", "name": "生成Dockerfile", "label": "生成Dockerfile"},
                    {"id": "build", "name": "构建镜像", "label": "构建镜像"},
                    {"id": "wiki", "name": "生成Wiki", "label": "生成Wiki"},
                    {"id": "reflect", "name": "反思失败", "label": "反思失败"},
                    {"id": "improve", "name": "改进Dockerfile", "label": "改进Dockerfile"}
                ],
                "edges": []
            };
            handleWorkflowMetadata(testData);
        };
        
        // 处理工作流元数据，动态生成节点
        function handleWorkflowMetadata(data) {
            console.log('===== WORKFLOW METADATA RECEIVED =====');
            console.log('Full metadata object:', data);
            console.log('Metadata type:', data.type);
            console.log('Nodes array exists:', !!data.nodes);
            console.log('Nodes is array:', Array.isArray(data.nodes));
            if (data.nodes && Array.isArray(data.nodes)) {
                console.log('Number of nodes:', data.nodes.length);
                console.log('First few nodes:', data.nodes.slice(0, 3));
            }
            
            const nodesContainer = document.getElementById('workflow-nodes');
            
            if (!nodesContainer) {
                console.error('Workflow nodes container not found');
                // 尝试找到workflow-nodes容器的父元素，看是否存在
                const parent = document.querySelector('#streaming-container');
                console.log('Streaming container exists:', !!parent);
                if (parent) {
                    console.log('Parent children:', parent.children);
                    // 如果父容器存在但没有子元素，手动创建工作流节点容器
                    const newContainer = document.createElement('div');
                    newContainer.id = 'workflow-nodes';
                    newContainer.className = 'grid grid-cols-1 md:grid-cols-4 gap-4 mb-6 min-h-[100px] bg-gray-50 p-4 border border-gray-200 rounded-lg';
                    parent.appendChild(newContainer);
                    console.log('Created new workflow nodes container:', newContainer);
                    return handleWorkflowMetadata(data); // 递归调用以使用新创建的容器
                }
                return;
            }
            
            console.log('Workflow nodes container found:', nodesContainer);
            console.log('Container style before:', nodesContainer.style.cssText);
            
            // 确保容器可见
            nodesContainer.style.display = 'grid';
            nodesContainer.style.visibility = 'visible';
            nodesContainer.style.opacity = '1';
            console.log('Container style after forcing visibility:', nodesContainer.style.cssText);
            
            // 清空容器
            console.log('Clearing nodes container');
            nodesContainer.innerHTML = '';
            
            // 存储节点信息和顺序
            if (data.nodes && Array.isArray(data.nodes)) {
                console.log('Processing nodes array');
                data.nodes.forEach((node, index) => {
                    workflowNodes[node.id] = node;
                    workflowNodeOrder.push(node.id);
                    
                    console.log(`Creating node ${index + 1}:`, node.id, '-', node.name);
                    
                    // 创建节点元素
                    const nodeElement = document.createElement('div');
                    nodeElement.id = `step-${node.id}`;
                    nodeElement.className = 'workflow-step step-waiting p-3 border rounded-lg';
                    
                    // 节点内容
                    nodeElement.innerHTML = `
                        <div class="flex items-center">
                            <div class="step-number w-6 h-6 rounded-full bg-gray-200 text-gray-700 flex items-center justify-center mr-2">
                                ${index + 1}
                            </div>
                            <div class="step-content">
                                <div class="step-title font-medium">${node.name || node.id}</div>
                                <div class="step-status text-xs text-gray-500">等待中</div>
                            </div>
                        </div>
                    `;
                    
                    // 添加到容器
                    nodesContainer.appendChild(nodeElement);
                    console.log(`Node ${node.id} added to container`);
                });
                
                // 显示添加的节点数量
                console.log(`Total nodes added: ${Object.keys(workflowNodes).length}`);
                console.log('Container innerHTML after adding nodes:', nodesContainer.innerHTML);
                
                // 强制重排以确保DOM更新
                nodesContainer.offsetHeight; // 触发重排
            } else {
                console.error('No valid nodes array in metadata');
                // 添加错误提示到容器
                nodesContainer.innerHTML = '<div class="text-red-500">无法加载工作流节点</div>';
            }
        }
        
        // 处理节点开始消息
        function handleNodeStart(data) {
            console.log('Node started:', data);
            const nodeId = data.node_id;
            
            // 只使用映射后的节点ID
            const mappedNodeId = nodeMappings[nodeId] || nodeId;
            
            // 特殊处理：如果test节点不在workflowNodeOrder中，手动添加它
            if (mappedNodeId === 'test' && workflowNodeOrder.indexOf('test') === -1) {
                console.log('Test node not found in workflowNodeOrder, adding it after build step');
                const buildIndex = workflowNodeOrder.indexOf('build');
                if (buildIndex !== -1) {
                    // 在build节点后添加test节点
                    workflowNodeOrder.splice(buildIndex + 1, 0, 'test');
                } else {
                    // 如果build节点也不存在，添加到数组末尾
                    workflowNodeOrder.push('test');
                }
                
                // 确保workflowNodes对象中有test节点信息
                if (!workflowNodes['test']) {
                    workflowNodes['test'] = { id: 'test', name: '环境验证' };
                }
                
                // 创建test节点的DOM元素
                const nodesContainer = document.getElementById('workflow-nodes');
                if (nodesContainer) {
                    const nodeElement = document.createElement('div');
                    nodeElement.id = 'step-test';
                    nodeElement.className = 'workflow-step step-waiting p-3 border rounded-lg';
                    nodeElement.innerHTML = `
                        <div class="flex items-center">
                            <div class="step-number w-6 h-6 rounded-full bg-gray-200 text-gray-700 flex items-center justify-center mr-2">
                                ${workflowNodeOrder.indexOf('test') + 1}
                            </div>
                            <div class="step-content">
                                <div class="step-title font-medium">环境验证</div>
                                <div class="step-status text-xs text-gray-500">等待中</div>
                            </div>
                        </div>
                    `;
                    
                    // 找到build节点后插入test节点
                    const buildElement = document.getElementById('step-build');
                    if (buildElement && buildElement.nextSibling) {
                        nodesContainer.insertBefore(nodeElement, buildElement.nextSibling);
                    } else {
                        nodesContainer.appendChild(nodeElement);
                    }
                }
            }
            
            // 确保在新节点开始时，所有之前的节点都被标记为完成
            completePreviousSteps(mappedNodeId);
            
            // 只更新映射后的节点ID状态
            updateStepStatus(mappedNodeId, 'active');
            
            // 更新当前步骤
            currentStep = mappedNodeId;
            
            // 添加步骤开始分隔符
            const nodeName = workflowNodes[mappedNodeId]?.name || mappedNodeId;
            showStepContent('content', `\n[${nodeName}阶段开始]\n` + '='.repeat(50) + '\n');
        }
        
        // 处理节点更新消息
        function handleNodeUpdate(data) {
            console.log('Node updated:', data);
            const nodeId = data.node_id;
            const status = data.status || 'running';
            
            // 只使用映射后的节点ID
            const mappedNodeId = nodeMappings[nodeId] || nodeId;
            
            // 确保节点状态正确更新
            if (nodeId) {
                let displayStatus = status;
                if (status === 'running' || status === 'waiting') {
                    displayStatus = 'active';
                }
                
                // 只更新映射后的节点ID状态
                updateStepStatus(mappedNodeId, displayStatus);
            }
        }
        
        // 处理节点完成消息
        function handleNodeComplete(data) {
            console.log('Node completed:', data);
            const nodeId = data.node_id;
            // 从result对象中获取success和error信息
            const result = data.result || {};
            const success = result.success !== false; // 默认为成功
            const error = result.error || '';
            
            // 只使用映射后的节点ID进行状态更新，避免重复更新和状态传播
            const mappedNodeId = nodeMappings[nodeId] || nodeId;
            
            console.log(`Node ${nodeId} (mapped to ${mappedNodeId}) completion details: success=${success}, error=${error}`);
            
            // 只更新映射后的节点ID状态，确保每个节点独立更新
            updateStepStatus(mappedNodeId, success ? 'completed' : 'failed');
            
            // 节点完成后，无论成功或失败，都更新currentStep
            if (currentStep === mappedNodeId) {
                console.log(`Current step ${currentStep} completed with status: ${success ? 'completed' : 'failed'}`);
                // 节点完成后将currentStep设置为null，避免后续错误错误地影响此节点
                currentStep = null;
            }
            
            // 如果失败，显示错误信息并明确指出是哪个节点失败
            if (!success && error) {
                const nodeName = workflowNodes[mappedNodeId]?.name || mappedNodeId;
                const errorContent = `<span style="color: #FF0000; font-weight: bold;">❌ ${nodeName} 失败: ${error}</span>`;
                showStepContent('content', errorContent + '\n');
            }
        }
        
        // 更新步骤状态
        function updateStepStatus(step, status) {
            // 假设传入的step已经是映射后的ID（从handleNodeStart等函数传入）
            console.log(`Updating step ${step} to status ${status}`);
            
            const stepElement = document.getElementById(`step-${step}`);
            if (!stepElement) {
                console.log(`Step element for ${step} not found`);
                return;
            }
            
            // 移除所有状态类
            Object.values(stepStatusClasses).forEach(className => {
                stepElement.classList.remove(className);
            });
            
            // 添加适当的类
            if (status === 'active') {
                stepElement.classList.add(stepStatusClasses.active);
                // 更新状态文本
                const statusElement = stepElement.querySelector('.step-status');
                if (statusElement) {
                    statusElement.textContent = '进行中';
                    statusElement.className = 'step-status text-xs text-blue-600';
                }
                console.log(`Step ${step} marked as active`);
            } else if (status === 'completed') {
                stepElement.classList.add(stepStatusClasses.completed);
                // 更新状态文本
                const statusElement = stepElement.querySelector('.step-status');
                if (statusElement) {
                    statusElement.innerHTML = '<span style="color: green;">✓ 成功</span>';
                    statusElement.className = 'step-status text-xs text-green-600';
                }
                console.log(`Step ${step} marked as completed`);
            } else if (status === 'failed') {
                stepElement.classList.add(stepStatusClasses.failed);
                // 更新状态文本
                const statusElement = stepElement.querySelector('.step-status');
                if (statusElement) {
                    statusElement.innerHTML = '<span style="color: red;">✗ 失败</span>';
                    statusElement.className = 'step-status text-xs text-red-600';
                }
                console.log(`Step ${step} marked as failed`);
            } else {
                stepElement.classList.add(stepStatusClasses.waiting);
                // 更新状态文本
                const statusElement = stepElement.querySelector('.step-status');
                if (statusElement) {
                    statusElement.textContent = '等待中';
                    statusElement.className = 'step-status text-xs text-gray-500';
                }
                console.log(`Step ${step} marked as waiting`);
            }
        }
        
        // 完成指定步骤之前的所有步骤
        function completePreviousSteps(currentStep) {
            console.log(`Completing previous steps for ${currentStep}`);
            
            // 获取标准化的节点ID，只使用实际渲染的节点ID
            const currentIndex = workflowNodeOrder.indexOf(currentStep);
            
            // 如果找不到当前步骤，记录日志但不强制完成其他节点
            if (currentIndex === -1) {
                console.log(`Step ${currentStep} not found in workflowNodeOrder`);
                console.log('Current workflowNodeOrder:', workflowNodeOrder);
                return;
            }
            
            // 完成所有之前的步骤
            for (let i = 0; i < currentIndex; i++) {
                const stepId = workflowNodeOrder[i];
                const stepElement = document.getElementById(`step-${stepId}`);
                
                // 只更新明确存在且不是active或failed状态的节点
                if (stepElement && 
                    !stepElement.classList.contains(stepStatusClasses.active) &&
                    !stepElement.classList.contains(stepStatusClasses.failed) &&
                    !stepElement.classList.contains(stepStatusClasses.completed)) {
                    console.log(`Automatically completing previous step: ${stepId}`);
                    updateStepStatus(stepId, 'completed');
                }
            }
        }
        
        function showStepContent(step, content) {
            // 检查当前是否在GitHub标签页
            const githubTab = document.getElementById('github');
            if (!githubTab || !githubTab.classList.contains('active')) {
                // 如果不在GitHub标签页，则不显示内容
                return;
            }
            
            const contentDisplay = document.getElementById('content-display');
            if (contentDisplay) {
                // 检查内容是否包含HTML标签
                if (content.includes('<') && content.includes('>')) {
                    // 如果是HTML内容，直接添加
                    contentDisplay.innerHTML += content;
                } else {
                    // 如果是纯文本，进行转义后添加
                    const escapedContent = content
                        .replace(/&/g, '&amp;')
                        .replace(/</g, '&lt;')
                        .replace(/>/g, '&gt;')
                        .replace(/"/g, '&quot;')
                        .replace(/'/g, '&#039;')
                        .replace(/\n/g, '<br>');
                    contentDisplay.innerHTML += escapedContent;
                }
                // 滚动到底部 - 使用更可靠的方法
                setTimeout(() => {
                    contentDisplay.scrollTop = contentDisplay.scrollHeight;
                }, 10);
            }
        }
        
        function appendStreamingContent(content) {
            // This function is kept for backward compatibility
            // 检查当前是否在GitHub标签页
            const githubTab = document.getElementById('github');
            if (!githubTab || !githubTab.classList.contains('active')) {
                // 如果不在GitHub标签页，则不显示内容
                return;
            }
            
            const contentDisplay = document.getElementById('content-display');
            if (contentDisplay) {
                // 检查内容是否包含HTML标签
                if (content.includes('<') && content.includes('>')) {
                    // 如果是HTML内容，直接添加
                    contentDisplay.innerHTML += content;
                } else {
                    // 如果是纯文本，进行转义后添加
                    const escapedContent = content
                        .replace(/&/g, '&amp;')
                        .replace(/</g, '&lt;')
                        .replace(/>/g, '&gt;')
                        .replace(/"/g, '&quot;')
                        .replace(/'/g, '&#039;')
                        .replace(/\n/g, '<br>');
                    contentDisplay.innerHTML += escapedContent;
                }
                // 滚动到底部 - 使用更可靠的方法
                setTimeout(() => {
                    contentDisplay.scrollTop = contentDisplay.scrollHeight;
                }, 10);
            }
        }
        
        function appendBuildLog(content) {
            // This function is kept for backward compatibility
            // 检查当前是否在GitHub标签页
            const githubTab = document.getElementById('github');
            if (!githubTab || !githubTab.classList.contains('active')) {
                // 如果不在GitHub标签页，则不显示内容
                return;
            }
            
            const contentDisplay = document.getElementById('content-display');
            if (contentDisplay) {
                // 检查内容是否包含HTML标签
                if (content.includes('<') && content.includes('>')) {
                    // 如果是HTML内容，直接添加
                    contentDisplay.innerHTML += content;
                } else {
                    // 如果是纯文本，进行转义后添加
                    const escapedContent = content
                        .replace(/&/g, '&amp;')
                        .replace(/</g, '&lt;')
                        .replace(/>/g, '&gt;')
                        .replace(/"/g, '&quot;')
                        .replace(/'/g, '&#039;')
                        .replace(/\n/g, '<br>');
                    contentDisplay.innerHTML += escapedContent;
                }
                // 滚动到底部 - 使用更可靠的方法
                setTimeout(() => {
                    contentDisplay.scrollTop = contentDisplay.scrollHeight;
                }, 10);
            }
        }
        
        function showError(error) {
            // 检查当前是否在GitHub标签页
            const githubTab = document.getElementById('github');
            if (!githubTab || !githubTab.classList.contains('active')) {
                // 如果不在GitHub标签页，则不显示内容
                return;
            }
            
            const contentDisplay = document.getElementById('content-display');
            if (contentDisplay) {
                const errorContent = '<span style="color: #FF0000; font-weight: bold;">❌ 错误: ' + error + '</span>';
                contentDisplay.innerHTML += '\n' + '='.repeat(50) + '\n' + errorContent + '\n' + '='.repeat(50) + '\n<br>';
                // 滚动到底部 - 使用更可靠的方法
                setTimeout(() => {
                    contentDisplay.scrollTop = contentDisplay.scrollHeight;
                }, 10);
            }
        }
        
        // 添加showComplete函数，用于展示生成的Dockerfile和相关信息
        function showComplete(result) {
            console.log('Showing complete result:', result);
            
            // 检查当前是否在GitHub标签页
            const githubTab = document.getElementById('github');
            if (!githubTab || !githubTab.classList.contains('active')) {
                // 如果不在GitHub标签页，则不显示内容
                return;
            }
            
            // 隐藏加载动画和状态消息
            const loadingIndicator = document.getElementById('loading-indicator');
            const statusMessage = document.getElementById('status-message');
            if (loadingIndicator) loadingIndicator.style.display = 'none';
            if (statusMessage) statusMessage.style.display = 'none';
            
            // 保持内容显示区域可见，但添加分隔符
            const contentDisplay = document.getElementById('content-display');
            if (contentDisplay) {
                contentDisplay.innerHTML += '\n' + '='.repeat(50) + '\n';
                contentDisplay.innerHTML += '<span style="color: #00FFFF; font-weight: bold;">[任务完成]</span>\n';
                contentDisplay.innerHTML += '='.repeat(50) + '\n';
            }
            
            // 在内容显示区域下方显示结果区域
            const resultsContainer = document.getElementById('results-container');
            if (resultsContainer) {
                resultsContainer.classList.remove('hidden');
                // 填充结果内容
                populateResults(resultsContainer, result);
            } else {
                console.error('Results container not found');
            }
        }
        
        // 填充结果内容的函数
        function populateResults(container, result) {
            if (!result) return;
            
            // 创建结果HTML
            let html = `
                <!-- Completion Header -->
                <div class="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                    <div class="flex items-center gap-2">
                        <svg class="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <span class="font-medium text-green-700">任务已完成</span>
                    </div>
                    <div class="mt-4 flex justify-end">
                        <a href="/" class="btn-secondary px-4 py-2 text-sm">
                            返回首页
                        </a>
                    </div>
                </div>
                
                <!-- Project Info -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <div class="border border-gray-200 rounded p-4">
                        <h3 class="font-medium text-gray-900 mb-1">项目</h3>
                        <p class="text-sm text-gray-600">${result.project_name || 'N/A'}</p>
                    </div>
                    <div class="border border-gray-200 rounded p-4">
                        <h3 class="font-medium text-gray-900 mb-1">技术栈</h3>
                        <p class="text-sm text-gray-600">${result.technology_stack || 'N/A'}</p>
                    </div>
                    <div class="border border-gray-200 rounded p-4">
                        <h3 class="font-medium text-gray-900 mb-1">仓库大小</h3>
                        <p class="text-sm text-gray-600">${result.repo_info?.file_count || 'N/A'} 个文件 (${result.repo_info?.size_mb || 'N/A'} MB)</p>
                    </div>
                </div>

                <!-- Dockerfile -->
                <div class="mb-6">
                    <div class="flex justify-between items-center mb-3">
                        <h3 class="text-lg font-medium text-gray-900">Dockerfile</h3>
                        <div class="flex space-x-2">
                            <button 
                                onclick="copyDockerfile()"
                                class="btn-primary px-4 py-2 flex items-center gap-2 text-sm"
                            >
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                                </svg>
                                复制 Dockerfile
                            </button>
                            <a href="/" class="btn-secondary px-4 py-2 text-sm">
                                返回首页
                            </a>
                        </div>
                    </div>
                    <div class="bg-gray-800 text-green-400 font-mono text-sm p-4 rounded-lg overflow-x-auto">
                        <div class="mb-2 flex items-center">
                            <div class="w-3 h-3 rounded-full bg-red-500 mr-2"></div>
                            <div class="w-3 h-3 rounded-full bg-yellow-500 mr-2"></div>
                            <div class="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                            <span class="ml-2">root@container:~#</span>
                        </div>
                        <pre class="p-2 whitespace-pre-wrap break-words" id="dockerfile-display">
${result.dockerfile || '# 未生成 Dockerfile'}
                        </pre>
                    </div>
                </div>
            `;
            // 添加docker-compose部分（如果存在）
            if (result.docker_compose) {
                html += `
                <div class="mb-6">
                    <div class="flex justify-between items-center mb-3">
                        <h3 class="text-lg font-medium text-gray-900">docker-compose.yml</h3>
                        <button 
                            onclick="copyCompose()"
                            class="btn-primary px-4 py-2 flex items-center gap-2 text-sm"
                        >
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                            </svg>
                            复制 Compose
                        </button>
                    </div>
                    <div class="bg-gray-800 text-green-400 font-mono text-sm p-4 rounded-lg overflow-x-auto">
                        <div class="mb-2 flex items-center">
                            <div class="w-3 h-3 rounded-full bg-red-500 mr-2"></div>
                            <div class="w-3 h-3 rounded-full bg-yellow-500 mr-2"></div>
                            <div class="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                            <span class="ml-2">root@container:~#</span>
                        </div>
                        <pre class="p-2 whitespace-pre-wrap break-words" id="compose-display">
${result.docker_compose || '# 未生成 docker-compose.yml'}
                        </pre>
                    </div>
                </div>
                `;
            }
            
            // 添加基础镜像选择理由和附加说明部分
            if (result.reasoning || result.additional_notes) {
                html += `<div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">`;
                
                if (result.reasoning) {
                    html += `
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">基础镜像选择理由</h3>
                        <div class="border border-gray-200 rounded p-4">
                            <p class="text-sm text-gray-600">${result.reasoning}</p>
                        </div>
                    </div>
                    `;
                }
                
                if (result.additional_notes) {
                    html += `
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-3">附加说明</h3>
                        <div class="border border-gray-200 rounded p-4">
                            <p class="text-sm text-gray-600 whitespace-pre-wrap">${result.additional_notes}</p>
                        </div>
                    </div>
                    `;
                }
                
                html += `</div>`;
            }
            
            // 添加Docker镜像构建信息
            if (result.image_build) {
                html += `
                <div class="mb-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Docker 镜像构建</h3>
                    <div class="border border-gray-200 rounded p-4">
                `;
                
                if (result.image_build.success) {
                    html += `
                        <div class="bg-green-50 border border-green-200 rounded p-3 mb-3">
                            <p class="text-green-700 font-medium">✅ 构建成功: ${result.image_build.image_tag || 'N/A'}</p>
                        </div>
                        <div class="mt-3">
                            <h4 class="font-medium text-gray-700 mb-2">镜像标签:</h4>
                            <div class="bg-gray-50 p-3 rounded font-mono text-sm break-words">
                                ${result.image_build.image_tag || 'N/A'}
                            </div>
                            <p class="mt-2 text-sm text-gray-600">您可以使用以下命令运行此镜像:</p>
                            <div class="mt-1 bg-gray-800 text-green-400 p-3 rounded font-mono text-sm">
                                docker run -p 8000:8000 ${result.image_build.image_tag || 'your-image-name'}
                            </div>
                        </div>
                    `;
                } else {
                    html += `
                        <div class="bg-red-50 border border-red-200 rounded p-3">
                            <p class="text-red-700 font-medium">❌ 构建失败: ${result.image_build.error || '未知错误'}</p>
                        </div>
                    `;
                    
                    if (result.image_build.build_log) {
                        html += `
                        <div class="mt-3">
                            <h4 class="font-medium text-gray-700 mb-2">构建日志:</h4>
                            <div class="bg-gray-800 text-red-400 p-3 rounded font-mono text-xs overflow-auto max-h-40">
                                ${result.image_build.build_log}
                            </div>
                        </div>
                        `;
                    }
                    
                    html += `
                        <div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded">
                            <p class="text-blue-700 text-sm">
                                <strong>提示:</strong> 构建失败可能是由于网络问题或Docker Hub镜像拉取问题导致的。
                                您可以手动复制Dockerfile内容并使用以下命令构建:
                            </p>
                            <div class="mt-2 bg-gray-800 text-yellow-400 p-2 rounded font-mono text-xs">
                                docker build --no-cache -t your-image-name .
                            </div>
                        </div>
                    `;
                }
                
                html += `
                    </div>
                </div>
                `;
            }
            
            // 将HTML插入到容器中
            container.innerHTML = html;
            
            // 初始化编辑器（如果尚未初始化）
            if (typeof initializeEditors === 'function') {
                setTimeout(() => {
                    console.log('Initializing editors');
                    initializeEditors();
                    // 确保编辑器内容正确设置
                    setTimeout(() => {
                        console.log('Setting editor values');
                        if (typeof dockerfileEditor !== 'undefined' && dockerfileEditor) {
                            console.log('Setting Dockerfile editor value');
                            dockerfileEditor.setValue(result.dockerfile || '# 未生成 Dockerfile');
                        } else {
                            console.log('Dockerfile editor not available, using manual initialization');
                            initDockerfileEditorManually(result.dockerfile || '# 未生成 Dockerfile');
                        }
                        
                    }, 100);
                }, 100);
            } else {
                console.log('initializeEditors function not found, using manual initialization');
                // 如果initializeEditors函数不存在，直接初始化编辑器
                setTimeout(() => {
                    initDockerfileEditorManually(result.dockerfile || '# 未生成 Dockerfile');
                }, 100);
            }
        }
        
        // 手动初始化Dockerfile编辑器的函数
        function initDockerfileEditorManually(content) {
            console.log('手动初始化 Dockerfile 编辑器，内容:', content);
            const dockerfileContainer = document.getElementById('dockerfile-editor');
            if (dockerfileContainer) {
                // 清空容器
                dockerfileContainer.innerHTML = '';
                
                // 创建一个文本区域作为备选方案
                const textarea = document.createElement('textarea');
                textarea.value = content || '# 未生成 Dockerfile';
                textarea.style.width = '100%';
                textarea.style.height = '400px';
                textarea.style.fontFamily = 'Monaco, Menlo, "Ubuntu Mono", monospace';
                textarea.style.fontSize = '14px';
                textarea.style.padding = '10px';
                textarea.style.border = '1px solid #D1D5DB';
                textarea.style.borderRadius = '0.375rem';
                textarea.style.backgroundColor = '#ffffff';
                textarea.style.resize = 'vertical';
                textarea.readOnly = true;
                
                dockerfileContainer.appendChild(textarea);
            } else {
                console.error('Dockerfile editor container not found');
            }
            
        }

        // 实现手动调整大小功能
        function makeResizable() {
            const resizableContainer = document.querySelector('.resizable-container');
            const resizeHandle = document.querySelector('.resize-handle');
            
            if (!resizableContainer || !resizeHandle) return;
            
            let isResizing = false;
            
            resizeHandle.addEventListener('mousedown', function(e) {
                isResizing = true;
                document.body.style.cursor = 'ns-resize';
                e.preventDefault();
            });
            
            document.addEventListener('mousemove', function(e) {
                if (!isResizing) return;
                
                const containerRect = resizableContainer.getBoundingClientRect();
                const newHeight = e.clientY - containerRect.top;
                
                // 确保最小高度和最大高度限制
                if (newHeight >= 200 && newHeight <= window.innerHeight * 0.75) {
                    resizableContainer.style.height = newHeight + 'px';
                }
            });
            
            document.addEventListener('mouseup', function() {
                isResizing = false;
                document.body.style.cursor = 'default';
            });
        }
        
        // 在页面加载完成后初始化调整大小功能
        document.addEventListener('DOMContentLoaded', function() {
            makeResizable();
            
            console.log('DOM 加载完成，检查 Monaco 容器...');
            
            // Check if containers exist and have proper dimensions
            const dockerfileContainer = document.getElementById('dockerfile-editor');
            const composeContainer = document.getElementById('compose-editor');
            
            if (dockerfileContainer) {
                console.log('Dockerfile 容器已找到:', dockerfileContainer.offsetWidth, 'x', dockerfileContainer.offsetHeight);
            }
            if (composeContainer) {
                console.log('Compose 容器已找到:', composeContainer.offsetWidth, 'x', composeContainer.offsetHeight);
            }
            
            // Set model selector to user's cached preference
            setModelFromCache();
            
            // For non-streaming results, initialize editors immediately
            {% if result and not streaming %}
            initializeEditors();
            {% elif streaming %}
            // For streaming, connect WebSocket
            connectWebSocket();
            {% endif %}
        });

        // Handle window resize for Monaco editors
        window.addEventListener('resize', () => {
            if (dockerfileEditor) dockerfileEditor.layout();
            if (composeEditor) composeEditor.layout();
        });
        
        {% endif %}
    </script>
</body>
</html>